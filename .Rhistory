layout.show(nf)
nf
matrix(c(1,1,0,2), 2, 2, byrow = TRUE)
matrix(c(1,1,1,2,3,4), 3, 2, byrow=TRUE)
matrix(c(1,1,1,2,3,4), 2, 3, byrow=TRUE)
graphics.off()
pdf('try L_piecewise_1.pdf',height=20,width=12)
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow=TRUE))
image.plot(lon,lat,L[i,,])
world(add=T)
plot(L.res[[1]]$L.ohc[[i]])
world(add=T)
plot(L.res[[1]]$L.sst[[i]])
world(add=T)
plot(L.res[[1]]$L.light[[i]])
world(add=T)
dev.off()
pdf('try L_piecewise_1.pdf')#,height=20,width=12)
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow=TRUE))
image.plot(lon,lat,L[i,,])
world(add=T)
plot(L.res[[1]]$L.ohc[[i]])
world(add=T)
plot(L.res[[1]]$L.sst[[i]])
world(add=T)
plot(L.res[[1]]$L.light[[i]])
world(add=T)
dev.off()
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow=TRUE))
image.plot(lon,lat,L[i,,])
world(add=T)
plot(L.res[[1]]$L.ohc[[i]])
world(add=T)
plot(L.res[[1]]$L.sst[[i]])
world(add=T)
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
image.plot(lon,lat,L[i,,])
world(add=T)
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
image.plot(lon,lat,L[i,,])
plot(L.res[[1]]$L.ohc[[i]])
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
plot(L.res[[1]]$L.ohc[[i]])
plot(L.res[[1]]$L.sst[[i]])
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
image.plot(lon,lat,L[i,,])
image(L.res[[1]]$L.ohc[[i]])
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
plot.raster(L.res[[1]]$L.ohc[[i]])
raster::plot(L.res[[1]]$L.ohc[[i]])
?grid.raster
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow=TRUE))
layout.show(4)
image.plot(lon,lat,L[i,,])
image.plot(lon,lat,L[i,,])
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow=TRUE))
image.plot(lon,lat,L[i,,])
image.plot(lon,lat,L[i,,])
graphics.off()
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow=TRUE))
image.plot(lon,lat,L[i,,])
image.plot(lon,lat,L[i,,])
i=48
graphics.off()
par(mfrow=c(1,3))
plot(L.res[[1]]$L.ohc[[i]])
world(add=T)
plot(L.res[[1]]$L.sst[[i]])
world(add=T)
plot(L.res[[1]]$L.light[[i]])
world(add=T)
L1
L1 <- L.res[[1]]$L.ohc
L2 <- L.res[[1]]$L.sst
L3 <- L.res[[1]]$L.light
L1[is.na(L1)] <- 0
L2[is.na(L2)] <- 0
L3[is.na(L3)] <- 0
# ALL CELLS IN A LIKELIHOOD SURFACE == 0?
naL1idx = cellStats(L1, sum, na.rm=T) != 0
naL2idx = cellStats(L2, sum, na.rm=T) != 0
naL3idx = cellStats(L3, sum, na.rm=T) != 0
naLidx = naL1idx + naL2idx + naL3idx
idx2 = which(naLidx == 2)
idx3 = which(naLidx == 3)
# WHERE ALL ARE ZEROS. THESE WILL BE INTERPOLTED IN THE FILTER
idx1 = which(naLidx == 1)
idx3
L2 <- L
L <- L1 * 0
ii=50
plot(L1[[ii]])
plot(L2[[ii]])
plot(L3[[ii]])
L2
L2 <- L.res[[1]]$L.sst
L2
plot(L1[[ii]])
plot(L2[[ii]])
plot(L3[[ii]])
plot(L1[[ii]] * L2[[ii]] * L3[[ii]])
graphics.off()
plot(L1[[ii]] * L2[[ii]] * L3[[ii]])
L1
L1[is.na(L1)] <- 0
L2[is.na(L2)] <- 0
L3[is.na(L3)] <- 0
par(mfrow=c(1,3))
plot(L1[[ii]])
plot(L2[[ii]])
plot(L3[[ii]])
plot(L1[[ii]] * L2[[ii]] * L3[[ii]])
idx3
L[L == 0] <- 1e-15
L[is.na(L)] <- 1e-15
graphics.off()
plot(L[[ii]])
naLidx
idx1
idx2
L <- make.L(L1 = L.res[[1]]$L.ohc , L2 = L.res[[1]]$L.sst,
L.mle.res = L.mle.res, dateVec = dateVec,
locs.grid = locs.grid, iniloc = iniloc)
L.mle <- L$L.mle; L <- L$L
image.plot(lon,lat,L[1,,])
iniloc
L.locs
!exists('L.locs')
rm(make.L)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L <- make.L(L1 = L.res[[1]]$L.ohc , L2 = L.res[[1]]$L.sst,
L.mle.res = L.mle.res, dateVec = dateVec,
locs.grid = locs.grid, iniloc = iniloc)
L.mle <- L$L.mle; L <- L$L
image.plot(lon,lat,L[1,,])
title('try again')
lon <- locs.grid$lon[1,]
lat <- locs.grid$lat[,1]
# tag location
x = which.min((iniloc$lon[1] - lon) ^ 2)
y = which.min((iniloc$lat[1] - lat) ^ 2)
print(paste('tag',x,y))
L.locs <- L1 * 0
L.locs[[1]][cellFromXY(L.locs[[1]], iniloc[1,c(5,4)])] <- 1
plot(L.locs[[1]])
points(iniloc[,c(5,4)])
L.locs[[length(dateVec)]][cellFromXY(L.locs[[length(dateVec)]], iniloc[2,c(5,4)])] <- 1
plot(L.locs[[135]])
points(iniloc[,c(5,4)])
idx <- c(1, length(dateVec))
idx
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L <- make.L(L1 = L.res[[1]]$L.ohc , L2 = L.res[[1]]$L.sst,
L.mle.res = L.mle.res, dateVec = dateVec,
locs.grid = locs.grid, iniloc = iniloc)
L.mle <- L$L.mle; L <- L$L
pdf('try L_noknown.pdf', height=8,width=12)
for (i in 1:length(dateVec)){
image.plot(lon,lat,L[i,,])
world(add=T)
}
dev.off()
image.plot(lon,lat,L[1,,])
graphics.off()
str(L)
str(lon)
str(lat)
str(locs.grid)
g <- L.res$g; lon <- g$lon[1,]; lat <- g$lat[,1]
str(lon)
str(lat)
image.plot(lon,lat,L[1,,])
pdf('try L_noknown.pdf', height=8,width=12)
for (i in 1:length(dateVec)){
image.plot(lon,lat,L[i,,])
world(add=T)
}
dev.off()
str(L)
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
D1 <- par0[1:2] # parameters for kernel 1. this is behavior mode transit
D2 <- par0[3:4] # parameters for kernel 2. resident behavior mode
p <- par0[5:6]
K1 = as.cimg(gausskern(D1[1], D1[2], muadv = 0))
K2 = as.cimg(gausskern(D2[1], D2[2], muadv = 0))
P <- matrix(c(p[1],1-p[1],1-p[2],p[2]),2,2,byrow=TRUE)
f = hmm.filter(g,L,K1,K2,P)
res = apply(f$phi[1,,,],2:3,sum, na.rm=T)
fields::image.plot(lon, lat, res/max(res), zlim = c(.05,1))
world(add=T)
s = hmm.smoother(f, K1, K2, P, plot = F)
# PLOT IT IF YOU WANT TO SEE LIMITS (CI)
sres = apply(s[1,,,], 2:3, sum, na.rm=T)
fields::image.plot(lon, lat, sres/max(sres), zlim = c(.05,1))
world(add=T)
distr = s
meanlat <- apply(apply(distr, c(2, 4), sum) * repmat(t(as.matrix(g$lat[,1])), T, 1), 1, sum)
meanlon <- apply(apply(distr, c(2, 3), sum) * repmat(t(as.matrix(g$lon[1,])), T, 1), 1, sum)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
setwd('~/Documents/WHOI/Data/Blues/2015/141256/')
ptt <- '141256'
# TAG/POPUP DATES AND LOCATIONS (dd, mm, YYYY, lat, lon)
iniloc <- data.frame(matrix(c(13, 10, 2015, 41.575, -69.423,
colnames(iniloc) = list('day','month','year','lat','lon')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y', tz='UTC')
dateVec <- as.Date(seq(tag, pop, by = 'day'))
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y', tz='UTC')
# VECTOR OF DATES FROM DATA. THIS WILL BE THE TIME STEPS, T, IN THE LIKELIHOODS
24, 2, 2016, 26.6798, -69.0147), nrow = 2, ncol = 5, byrow = T))
iniloc <- data.frame(matrix(c(13, 10, 2015, 41.575, -69.423,
24, 2, 2016, 26.6798, -69.0147), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y', tz='UTC')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y', tz='UTC')
# VECTOR OF DATES FROM DATA. THIS WILL BE THE TIME STEPS, T, IN THE LIKELIHOODS
dateVec <- as.Date(seq(tag, pop, by = 'day'))
myDir <- '~/Documents/WHOI/RCode/hmmwoa/inst/extdata/' # WHERE YOUR DATA LIVES, THIS IS THE EXAMPLE DATA
tag.sst <- read.wc(ptt, wd = myDir, type = 'sst', tag=tag, pop=pop);
sst.udates <- tag.sst$udates; tag.sst <- tag.sst$data
pdt <- read.wc(ptt, wd = myDir, type = 'pdt', tag=tag, pop=pop);
pdt.udates <- pdt$udates; pdt <- pdt$data
light <- read.wc(ptt, wd = myDir, type = 'light', tag=tag, pop=pop);
light.udates <- light$udates; light <- light$data
sp.lim <- list(lonmin = -95, lonmax = -52, latmin = 10, latmax = 55)
if (exists('sp.lim')){
locs.grid <- setup.locs.grid(sp.lim)
} else{
locs.grid <- setup.locs.grid(locs)
sp.lim <- list(lonmin = min(locs.grid$lon[1,]), lonmax = max(locs.grid$lon[1,]),
latmin = min(locs.grid$lat[,1]), latmax = max(locs.grid$lat[,1]))
}
# GET THE LIKELIHOOD ELLIPSES
L.light <- calc.light(light, locs.grid = locs.grid, dateVec = dateVec)
str(light)
t=3
light.t <- light[which(lightDates %in% dateVec[t]),]
lon <- locs.grid$lon[1,]
lat <- locs.grid$lat[,1]
# then rebuild these vectors based on input resolution to this particular function, default is 1 deg
lon <- seq(min(lon), max(lon), res)
lat <- seq(min(lat), max(lat), res)
res=1
lon <- seq(min(lon), max(lon), res)
lat <- seq(min(lat), max(lat), res)
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
L.grid = numeric(length = c(length(lon)*length(lat)*length(dateVec)))
dim(L.grid) = c(length(lon),length(lat), length(dateVec))
list.ras <- list(x = lon, y = lat, z = L.grid)
ex <- raster::extent(list.ras)
L.light <- raster::brick(list.ras$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], transpose=T, crs)
L.light <- raster::flip(L.light, direction = 'y')
xy = as.matrix(expand.grid(lon,lat))
xy = SpatialPoints(xy, proj4string=CRS("+proj=longlat +datum=WGS84"))
# now do the building and rasterize
sr.grid = numeric(length = c(length(lon)*length(lat)*365))
dim(sr.grid) = c(length(lon),length(lat), 365)
ss.grid = sr.grid
t <- Sys.time()
fyear = seq(ISOdate(year(dateVec[1]), 1, 1, tz = 'UTC'), ISOdate(year(dateVec[1]), 12, 31, tz = 'UTC'), 'day')
sr.grid[,,1:365] = sapply(1:365, function(i) matrix(sunriset(xy, fyear[i], direction = "sunrise", POSIXct.out = TRUE)$day,length(lon),length(lat)))
ss.grid[,,1:365] = sapply(1:365, function(i) matrix(sunriset(xy, fyear[i], direction = "sunset", POSIXct.out = TRUE)$day,length(lon),length(lat)))
paste(Sys.time() - t, 'for sapply')
t <- Sys.time()
list.ras <- list(x = lon, y = lat, z = sr.grid*24*60)
ex <- raster::extent(list.ras)
sr.ras <- raster::brick(list.ras$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], transpose=T, crs)
sr.ras <- raster::flip(sr.ras, direction = 'y')
list.ras <- list(x = lon, y = lat, z = ss.grid*24*60)
ss.ras <- raster::brick(list.ras$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], transpose=T, crs)
ss.ras <- raster::flip(ss.ras, direction = 'y')
paste(Sys.time() - t, 'for both raster manipulations')
# need to be able to cut SRSS times from tag that aren't within limits of the grid
min.sr <- sapply(1:365, function(i) cellStats(sr.ras[[i]],stat='min',na.rm=T))
max.sr <- sapply(1:365, function(i) cellStats(sr.ras[[i]],stat='max',na.rm=T))
min.ss <- sapply(1:365, function(i) cellStats(ss.ras[[i]],stat='min',na.rm=T))
max.ss <- sapply(1:365, function(i) cellStats(ss.ras[[i]],stat='max',na.rm=T))
print(paste('finished min/max SRSS calcs at', Sys.time()))
# make some calculations on the tag data: yday, dtime, etc
light <- light[,c('Day','Time','Type')]
light$dtime <- dmy_hms(paste(light$Day, light$Time, sep = ' '))
light$yday <- yday(light$dtime)
light$daymins <- minute(light$dtime) + (hour(light$dtime) * 60)
light <- light[which(light$Type != ''),]
lightDates <- as.Date(format(light$dtime, '%Y-%m-%d'))
print(paste('starting for loop', Sys.time()))
t
t=3
light.t <- light[which(lightDates %in% dateVec[t]),]
light.t
length(light.t[,1]) == 1 & any(light.t$Type == 'Dawn')
length(light.t[,1]) == 1 & any(light.t$Type == 'Dusk')
didx <- light.t$yday[1]
sr <- light.t$daymins[which(light.t$Type == 'Dawn')]
ss <- light.t$daymins[which(light.t$Type == 'Dusk')]
if(length(sr) == 0){sr <- NA}
if(length(ss) == 0){ss <- NA}
if(length(sr) > 1){
# we want the first SR time if there are multiple
sr <- sr[1]
}
if(length(ss) > 1){
# we want the last SS time if there are multiple
ss <- ss[length(ss)]
}
# filter based on possible grid values
if(is.na(sr)){
} else if(sr < min.sr[didx] | sr > max.sr[didx]){
sr <- NA
}
if(is.na(ss)){
} else if(ss < min.ss[didx] | ss > max.ss[didx]){
ss <- NA
}
light[which(lightDates %in% dateVec[t] & light$Type == 'Dawn'), 6] <- sr
light[which(lightDates %in% dateVec[t] & light$Type == 'Dusk'), 6] <- ss
sr
ss
srf <- raster::focal(sr.ras[[didx]], w = matrix(1, nrow = 3, ncol = 3), fun = function(x) sd(x, na.rm = T))
# the SR likelihood
srlik <- liksrss(sr, srss = sr.ras[[didx]], srsd = srf)
# and sunset
ssf <- raster::focal(ss.ras[[didx]], w = matrix(1, nrow = 3, ncol = 3), fun = function(x) sd(x, na.rm = T))
sslik <- liksrss(ss, srss = ss.ras[[didx]], srsd = ssf)
any(srlik[] != 0) & any(sslik[] != 0)
r <- srlik * sslik
max.lat <- xyFromCell(r, which.max(r))[2]
plot(r)
max.lat
cds <- rbind(c(min(lon), max.lat), c(max(lon), max.lat))#, c(40,5), c(15,-45), c(-10,-25))
lines <- SpatialLines(list(Lines(list(Line(cds)), "1")))
r[] <- c(unlist(extract(r, lines)))
plot(r)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
setwd('~/Documents/WHOI/Data/Blues/2015/141256/')
#load('~/Documents/WHOI/RData/Blues/2015/141256/example256_16May.RData')
# READ IN TAG DATA
ptt <- '141256'
# TAG/POPUP DATES AND LOCATIONS (dd, mm, YYYY, lat, lon)
iniloc <- data.frame(matrix(c(13, 10, 2015, 41.575, -69.423,
24, 2, 2016, 26.6798, -69.0147), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y', tz='UTC')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y', tz='UTC')
# VECTOR OF DATES FROM DATA. THIS WILL BE THE TIME STEPS, T, IN THE LIKELIHOODS
dateVec <- as.Date(seq(tag, pop, by = 'day'))
# READ IN DATA FROM WC FILES
myDir <- '~/Documents/WHOI/RCode/hmmwoa/inst/extdata/' # WHERE YOUR DATA LIVES, THIS IS THE EXAMPLE DATA
tag.sst <- read.wc(ptt, wd = myDir, type = 'sst', tag=tag, pop=pop);
sst.udates <- tag.sst$udates; tag.sst <- tag.sst$data
pdt <- read.wc(ptt, wd = myDir, type = 'pdt', tag=tag, pop=pop);
pdt.udates <- pdt$udates; pdt <- pdt$data
light <- read.wc(ptt, wd = myDir, type = 'light', tag=tag, pop=pop);
light.udates <- light$udates; light <- light$data
#----------------------------------------------------------------------------------#
# LIGHT LIKELIHOOD
# Light-based Longitude Likelihood
#----------------------------------------------------------------------------------#
# SET SPATIAL LIMITS, IF DESIRED
sp.lim <- list(lonmin = -95, lonmax = -52, latmin = 10, latmax = 55)
if (exists('sp.lim')){
locs.grid <- setup.locs.grid(sp.lim)
} else{
locs.grid <- setup.locs.grid(locs)
sp.lim <- list(lonmin = min(locs.grid$lon[1,]), lonmax = max(locs.grid$lon[1,]),
latmin = min(locs.grid$lat[,1]), latmax = max(locs.grid$lat[,1]))
}
sst.dir <- paste('~/Documents/WHOI/RData/SST/OI/', ptt, '/',sep = '')
L.sst <- calc.sst(tag.sst, sst.dir = sst.dir, dateVec = dateVec)
plot(L.sst[[3]])
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/', ptt, '/',sep = '')
L.ohc <- calc.ohc(pdt, ohc.dir = ohc.dir, dateVec = dateVec, isotherm = '')
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L.ohc <- calc.ohc(pdt, ohc.dir = ohc.dir, dateVec = dateVec, isotherm = '')
isotherm = ''
cp <- 3.993 # kJ/kg*C <- heat capacity of seawater
rho <- 1025 # kg/m3 <- assumed density of seawater
# calculate midpoint of tag-based min/max temps
pdt$MidTemp <- (pdt$MaxTemp + pdt$MinTemp) / 2
# get unique time points
udates <- unique(pdt$Date)
T <- length(udates)
if(isotherm != '') iso.def <- TRUE else iso.def <- FALSE
i=1
time <- udates[i]
time
pdt.i <- pdt[which(pdt$Date == time),]
print(pdt.i)
# open day's hycom data
nc <- ncdf::open.ncdf(paste(ohc.dir, ptt,'_', as.Date(time), '.nc', sep=''))
dat <- ncdf::get.var.ncdf(nc, 'water_temp')
depth <- ncdf::get.var.ncdf(nc, 'depth')
lon <- ncdf::get.var.ncdf(nc, 'lon')
lat <- ncdf::get.var.ncdf(nc, 'lat')
y <- pdt.i$Depth[!is.na(pdt.i$Depth)]
y[y<0] <- 0
#extract temperature from tag data for day i
x <- pdt.i$MidTemp[!is.na(pdt.i$Depth)]
# use the which.min
depIdx = unique(apply(as.data.frame(pdt.i$Depth), 1, FUN=function(x) which.min((x - depth) ^ 2)))
hycomDep <- depth[depIdx]
fit.low <- locfit::locfit(pdt.i$MinTemp ~ pdt.i$Depth)
pdt.i
?locfit
i=8
time <- udates[i]
pdt.i <- pdt[which(pdt$Date == time),]
print(pdt.i)
fit.low <- locfit::locfit(pdt.i$MinTemp ~ pdt.i$Depth)
i=10
pdt.i <- pdt[which(pdt$Date == time),]
print(pdt.i)
i=11
pdt.i <- pdt[which(pdt$Date == time),]
print(pdt.i)
i=30
pdt.i <- pdt[which(pdt$Date == time),]
print(pdt.i)
i=50
pdt.i <- pdt[which(pdt$Date == time),]
print(pdt.i)
i=30
time <- udates[i]
pdt.i <- pdt[which(pdt$Date == time),]
print(pdt.i)
fit.low <- locfit::locfit(pdt.i$MinTemp ~ pdt.i$Depth)
#suppressWarnings(
fit.high <- locfit::locfit(pdt.i$MaxTemp ~ pdt.i$Depth)
n = length(hycomDep)
#suppressWarnings(
pred.low = predict(fit.low, newdata = hycomDep, se = T, get.data = T)
#suppressWarnings(
pred.high = predict(fit.high, newdata = hycomDep, se = T, get.data = T)
i=1
time <- udates[i]
pdt.i <- pdt[which(pdt$Date == time),]
print(pdt.i)
plot(pdt.i$MinTemp ~ pdt.i$Depth, type='l')
fit.low <- locfit::locfit(pdt.i$MinTemp ~ pdt.i$Depth)
options(warn=1)
fit.low <- locfit::locfit(pdt.i$MinTemp ~ pdt.i$Depth)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L.ohc <- calc.ohc(pdt, ohc.dir = ohc.dir, dateVec = dateVec, isotherm = '')
setwd('~/Documents/WHOI/Data/Blues/2015/141256/')
#load('~/Documents/WHOI/RData/Blues/2015/141256/example256_16May.RData')
# READ IN TAG DATA
ptt <- '141256'
# TAG/POPUP DATES AND LOCATIONS (dd, mm, YYYY, lat, lon)
iniloc <- data.frame(matrix(c(13, 10, 2015, 41.575, -69.423,
24, 2, 2016, 26.6798, -69.0147), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y', tz='UTC')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y', tz='UTC')
# VECTOR OF DATES FROM DATA. THIS WILL BE THE TIME STEPS, T, IN THE LIKELIHOODS
dateVec <- as.Date(seq(tag, pop, by = 'day'))
# READ IN DATA FROM WC FILES
myDir <- '~/Documents/WHOI/RCode/hmmwoa/inst/extdata/' # WHERE YOUR DATA LIVES, THIS IS THE EXAMPLE DATA
tag.sst <- read.wc(ptt, wd = myDir, type = 'sst', tag=tag, pop=pop);
sst.udates <- tag.sst$udates; tag.sst <- tag.sst$data
pdt <- read.wc(ptt, wd = myDir, type = 'pdt', tag=tag, pop=pop);
pdt.udates <- pdt$udates; pdt <- pdt$data
light <- read.wc(ptt, wd = myDir, type = 'light', tag=tag, pop=pop);
light.udates <- light$udates; light <- light$data
#----------------------------------------------------------------------------------#
# LIGHT LIKELIHOOD
# Light-based Longitude Likelihood
#----------------------------------------------------------------------------------#
# SET SPATIAL LIMITS, IF DESIRED
sp.lim <- list(lonmin = -95, lonmax = -52, latmin = 10, latmax = 55)
if (exists('sp.lim')){
locs.grid <- setup.locs.grid(sp.lim)
} else{
locs.grid <- setup.locs.grid(locs)
sp.lim <- list(lonmin = min(locs.grid$lon[1,]), lonmax = max(locs.grid$lon[1,]),
latmin = min(locs.grid$lat[,1]), latmax = max(locs.grid$lat[,1]))
}
sst.dir <- paste('~/Documents/WHOI/RData/SST/OI/', ptt, '/',sep = '')
L.sst <- calc.sst(tag.sst, sst.dir = sst.dir, dateVec = dateVec)
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/', ptt, '/',sep = '')
L.ohc <- calc.ohc(pdt, ohc.dir = ohc.dir, dateVec = dateVec, isotherm = '')
L.light
L.pdt
L.rasters <- list(L.ohc = L.ohc, L.sst = L.sst)
L.res <- resample.grid(L.rasters, L.rasters$L.ohc)
L.mle.res <- L.res$L.mle.res
g <- L.res$g; lon <- g$lon[1,]; lat <- g$lat[,1]
g.mle <- L.res$g.mle
L <- make.L(L1 = L.res[[1]]$L.ohc , L2 = L.res[[1]]$L.sst,
L.mle.res = L.mle.res, dateVec = dateVec,
locs.grid = locs.grid, iniloc = iniloc)
L.mle <- L$L.mle; L <- L$L
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
D1 <- par0[1:2] # parameters for kernel 1. this is behavior mode transit
D2 <- par0[3:4] # parameters for kernel 2. resident behavior mode
p <- par0[5:6]
K1 = as.cimg(gausskern(D1[1], D1[2], muadv = 0))
K2 = as.cimg(gausskern(D2[1], D2[2], muadv = 0))
P <- matrix(c(p[1],1-p[1],1-p[2],p[2]),2,2,byrow=TRUE)
#----------------------------------------------------------------------------------#
# RUN THE FILTER STEP
f = hmm.filter(g,L,K1,K2,P)
res = apply(f$phi[1,,,],2:3,sum, na.rm=T)
fields::image.plot(lon, lat, res/max(res), zlim = c(.05,1))
#----------------------------------------------------------------------------------#
# RUN THE SMOOTHING STEP
s = hmm.smoother(f, K1, K2, P, plot = F)
# PLOT IT IF YOU WANT TO SEE LIMITS (CI)
sres = apply(s[1,,,], 2:3, sum, na.rm=T)
fields::image.plot(lon, lat, sres/max(sres), zlim = c(.05,1))
world(add=T)
distr = s
meanlat <- apply(apply(distr, c(2, 4), sum) * repmat(t(as.matrix(g$lat[,1])), T, 1), 1, sum)
base::save.image('blue256_example_5Oct2016.RData')
