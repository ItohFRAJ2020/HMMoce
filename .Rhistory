r <- raster(t(list.r$z[,,ii]), xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
r <- flip(r, direction = 'y')
# focal matrix and calculation
w = matrix(1/9, nrow = 3, ncol = 3)
f <- focal(r, w, function(x) sd(x))
# put results in an array
f.arr[,,ii] <- t(as.matrix(flip(f,direction='y')))
put.var.ncdf(ncnew, sd, f.arr[,,ii], start = c(1,1,ii,1), count = c(-1,-1,1,1),verbose=F)
print(paste(round(ii/57*100),'%',sep=''))
}
Sys.time() - t # about 16 mins on the mac w/o put.var inside
i
i=2
ncfiles
nc = open.ncdf(paste(woa.dir, ncfiles[i], sep = ''))
# extract mean temps and write to temp var
mu.temp = get.var.ncdf(nc, 't_an', start = c(1, 1, 1, 1), count = c(length(lon), length(lat), length(depth), 1))
list.r <- list(x = lon, y = lat, z = mu.temp)
ex <- extent(list.r)
f.arr <- array(NA, dim=c(length(lon),length(lat),57))
t <- Sys.time()
for(ii in 1:57){
# create and orient raster
r <- raster(t(list.r$z[,,ii]), xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
r <- flip(r, direction = 'y')
# focal matrix and calculation
w = matrix(1/9, nrow = 3, ncol = 3)
f <- focal(r, w, function(x) sd(x))
# put results in an array
f.arr[,,ii] <- t(as.matrix(flip(f,direction='y')))
put.var.ncdf(ncnew, sd, f.arr[,,ii], start = c(1,1,ii,i), count = c(-1,-1,1,1),verbose=F)
print(paste(round(ii/57*100),'%',sep=''))
}
Sys.time() - t
i
ii
i=3
nc = open.ncdf(paste(woa.dir, ncfiles[i], sep = ''))
# extract mean temps and write to temp var
mu.temp = get.var.ncdf(nc, 't_an', start = c(1, 1, 1, 1), count = c(length(lon), length(lat), length(depth), 1))
list.r <- list(x = lon, y = lat, z = mu.temp)
ex <- extent(list.r)
# and loop through depth levels
f.arr <- array(NA, dim=c(length(lon),length(lat),57))
t <- Sys.time()
for(ii in 1:57){
# create and orient raster
r <- raster(t(list.r$z[,,ii]), xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
r <- flip(r, direction = 'y')
# focal matrix and calculation
w = matrix(1/9, nrow = 3, ncol = 3)
f <- focal(r, w, function(x) sd(x))
# put results in an array
f.arr[,,ii] <- t(as.matrix(flip(f,direction='y')))
put.var.ncdf(ncnew, sd, f.arr[,,ii], start = c(1,1,ii,i), count = c(-1,-1,1,1),verbose=F)
print(paste(round(ii/57*100),'%',sep=''))
}
Sys.time() - t
i
i=4
nc = open.ncdf(paste(woa.dir, ncfiles[i], sep = ''))
# extract mean temps and write to temp var
mu.temp = get.var.ncdf(nc, 't_an', start = c(1, 1, 1, 1), count = c(length(lon), length(lat), length(depth), 1))
ncfiles
list.r <- list(x = lon, y = lat, z = mu.temp)
ex <- extent(list.r)
# and loop through depth levels
f.arr <- array(NA, dim=c(length(lon),length(lat),57))
t <- Sys.time()
for(ii in 1:57){
# create and orient raster
r <- raster(t(list.r$z[,,ii]), xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
r <- flip(r, direction = 'y')
# focal matrix and calculation
w = matrix(1/9, nrow = 3, ncol = 3)
f <- focal(r, w, function(x) sd(x))
# put results in an array
f.arr[,,ii] <- t(as.matrix(flip(f,direction='y')))
put.var.ncdf(ncnew, sd, f.arr[,,ii], start = c(1,1,ii,i), count = c(-1,-1,1,1),verbose=F)
print(paste(round(ii/57*100),'%',sep=''))
}
Sys.time() - t
i
for(i in 5:12){
nc = open.ncdf(paste(woa.dir, ncfiles[i], sep = ''))
# extract mean temps and write to temp var
mu.temp = get.var.ncdf(nc, 't_an', start = c(1, 1, 1, 1), count = c(length(lon), length(lat), length(depth), 1))
# put the extracted temp data into newly created 4d netcdf (i = month)
#t <- Sys.time()
#put.var.ncdf(ncnew, temp, mu.temp[,,1], start = c(1,1,1,i), count = c(-1,-1,1,1), verbose=T)
#Sys.time() - t # takes about 6.5 mins on the mac
# focal calc on mean temp and write to sd var
list.r <- list(x = lon, y = lat, z = mu.temp)
ex <- extent(list.r)
# and loop through depth levels
f.arr <- array(NA, dim=c(length(lon),length(lat),57))
t <- Sys.time()
for(ii in 1:57){
# create and orient raster
r <- raster(t(list.r$z[,,ii]), xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
r <- flip(r, direction = 'y')
# focal matrix and calculation
w = matrix(1/9, nrow = 3, ncol = 3)
f <- focal(r, w, function(x) sd(x))
# put results in an array
f.arr[,,ii] <- t(as.matrix(flip(f,direction='y')))
put.var.ncdf(ncnew, sd, f.arr[,,ii], start = c(1,1,ii,i), count = c(-1,-1,1,1),verbose=F)
print(paste(round(ii/57*100),'%',sep=''))
}
Sys.time() - t
# about 16 mins on the mac w/o put.var inside
# 20 mins on mac with put.var inside and putting in for each ii iteration.
# write the sd var
#put.var.ncdf(ncnew, sd, f.arr[,,1], start = c(1,1,1,i), count = c(-1,-1,1,1))
}
close.ncdf(ncnew)
ncnew
woa.dir = '/Users/Cam/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/woa13_25deg_global_meantemp.nc'
sd.dir = '/Users/Cam/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/woa13_25deg_global_sd.nc'
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
return.woa = extract.woa(woa.dir, limits, resolution = 'quarter')
extract.woa
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
return.woa = extract.woa(woa.dir, limits, resolution = 'quarter')
limits = c(min(lon)-3, max(lon)+3, min(lat)-3, max(lat)+3)
limits
setwd('~/Documents/WHOI/RData/WhiteSharks/2013/121325/')
data("countriesLow")
#---------------------------------------------------------------#
# read in tag data
#---------------------------------------------------------------#
ptt <- 121325
iniloc <- data.frame(matrix(c(3, 3, 2013, 30.3917, -81.3802,
31, 8, 2013, 30.668, -79.972), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
data("countriesLow")
#---------------------------------------------------------------#
# read in tag data
#---------------------------------------------------------------#
ptt <- 121325
iniloc <- data.frame(matrix(c(3, 3, 2013, 30.3917, -81.3802,
31, 8, 2013, 30.668, -79.972), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
pdt <- extract.pdt(pdt)
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
dts <- as.POSIXct(pdt$Date, format = findDateFormat(pdt$Date))
d1 <- as.POSIXct('1900-01-02') - as.POSIXct('1900-01-01')
didx <- dts >= (tag + d1) & dts <= (pop - d1)
pdt <- pdt[didx,]
lon = c(-90, -40)
lat = c(10, 55)
udates <- unique(as.Date(pdt$Date))
dateVec <- as.Date(seq(tag, pop, by = 'day'))
locs <- read.table(paste(ptt, '-Locations.csv', sep=''), sep=',', header = T, blank.lines.skip = F)
dts <- format(as.POSIXct(locs$Date, format = findDateFormat(locs$Date)), '%Y-%m-%d')
didx <- dts > (tag + d1) & dts < (pop - d1)
locs <- locs[didx,]
g <- setup.grid(locs, res = 'quarter') # make sure loading function from misc_funs.r
ngrid <- rev(dim(g$lon))
lon <- g$lon[1,]
lat <- g$lat[,1]
L.locs <- calc.locs(locs, iniloc, g, raster = T, dateVec = dateVec)
# try quick plot to check, if raster = 'stack' or 'brick' above
plot(L.locs[[4]])
plot(countriesLow, add = T)
limits = c(min(lon)-3, max(lon)+3, min(lat)-3, max(lat)+3)
limits
woa.dir = '/Users/Cam/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/woa13_25deg_global_meantemp.nc'
sd.dir = '/Users/Cam/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/woa13_25deg_global_sd.nc'
return.woa = extract.woa(woa.dir, limits, resolution = 'quarter')
str(return.woa)
image.plot(return.woa$dat[,,1,1])
return.sd = extract.woa(sd.dir, limits, resolution = 'quarter')
str(return.sd)
image.plot(return.sd$dat[,,1,1])
dat = return.woa;
dat$lon = as.numeric(dat$lon);
dat$lat = as.numeric(dat$lat);
dat$depth = as.numeric(dat$depth)
sd = return.sd$dat
str(sd)
dat$dat = removePacific(dat$dat, dat$lat, dat$lon)
# check woa data
graphics.off()
image.plot(dat$lon,dat$lat,dat$dat[,,1,1])
image.plot(dat$lon,dat$lat,sd[,,1,1])
L.pdt <- calc.pdt.int(pdt, dat = dat$dat, lat = dat$lat, lon = dat$lon, g, sd=sd, depth = dat$depth, raster = 'stack', dateVec = dateVec)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L.pdt <- calc.pdt.int(pdt, dat = dat$dat, lat = dat$lat, lon = dat$lon, g, sd=sd, depth = dat$depth, raster = 'stack', dateVec = dateVec)
udates <- unique(pdt$Date)
T <- length(udates)
pdt$MidTemp <- (pdt$MaxTemp + pdt$MinTemp) / 2
L.pdt <- array(0, dim = c(dim(dat)[1:2], length(dateVec)))
i=1
time <- udates[i]
pdt.i <- pdt[which(pdt$Date == time),]
#extracts depth from tag data for day i
y <- pdt.i$Depth[!is.na(pdt.i$Depth)]
y[y<0] <- 0
#extract temperature from tag data for day i
x <- pdt.i$MidTemp[!is.na(pdt.i$Depth)]
# use the which.min
depIdx = apply(as.data.frame(pdt.i$Depth), 1, FUN=function(x) which.min((x-depth)^2))
woaDep <- depth[depIdx]
pdt.i
depth
depth = dat$depth
depIdx = apply(as.data.frame(pdt.i$Depth), 1, FUN=function(x) which.min((x-depth)^2))
woaDep <- depth[depIdx]
woaDep
fit.low <- locfit(pdt.i$MinTemp ~ pdt.i$Depth)
fit.high <- locfit(pdt.i$MaxTemp ~ pdt.i$Depth)
n = length(depth[depIdx])
pred.low = predict(fit.low, newdata = depth[depIdx], se = T, get.data = T)
pred.high = predict(fit.high, newdata = depth[depIdx], se = T, get.data = T)
# data frame for next step
df = data.frame(low=pred.low$fit-pred.low$se.fit*sqrt(n)
, high=pred.high$fit+pred.high$se.fit*sqrt(n)
, depth = depth[depIdx])
pdtMonth <- as.numeric(format(as.Date(pdt.i$Date), format='%m'))[1]
dat.i = dat[,,,pdtMonth] #extract months climatology
dat.i[is.na(dat.i)] = -9999
pdtMonth
str(dat)
dat = dat$dat
dat.i = dat[,,,pdtMonth] #extract months climatology
dat.i[is.na(dat.i)] = -9999
str(sd)
sd.i = sd[,,,pdtMonth]
any(is.na(sd))
sd.i[is.na(sd.i)] = -9999
lik.pdt = array(NA, dim=c(dim(dat)[1], dim(dat)[2], length(depIdx)))
b=1
str(sd.i)
df
lik.pdt[,,b] = likint(dat.i[,,b], df[b,1], df[b,2], sd.i[,,b])
str(sd.i[,,b])
str(dat.i[,,b])
image.plot(sd.i[,,b])
image.plot(dat.i[,,b])
?likint
likint
?dnorm
df[b,1]
dnorm(df[b,1],mean=dat.i[,,b],sd=sd.i[,,b])
image.plot(dnorm(df[b,1],mean=dat.i[,,b],sd=sd.i[,,b]))
?dnorm
image.plot(dnorm(df[b,1],mean=dat.i[,,b],sd=.7))
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/', ptt, '/',sep = '')
i=1
time <- as.Date(udates[i])
time
ohc.dir
cp <- 3.993 # kJ/kg*C <- heat capacity of seawater
rho <- 1025 # kg/m3 <- assumed density of seawater
# calculate midpoint of tag-based min/max temps
pdt$MidTemp <- (pdt$MaxTemp + pdt$MinTemp) / 2
# get unique time points
udates <- unique(pdt$Date)
iso.def <- FALSE
time <- udates[i]
time
pdt.i <- pdt[which(pdt$Date == time),]
pdt.i
nc <- open.ncdf(paste(ohc.dir, 'Lyd_', as.Date(time), '.nc', sep=''))
dat <- get.var.ncdf(nc, 'water_temp')
depth <- get.var.ncdf(nc, 'depth')
lon <- get.var.ncdf(nc, 'lon')
lat <- get.var.ncdf(nc, 'lat')
f.arr <- array(NA, dim=c(length(lon),length(lat),udates))
lon
str(g)
f.arr <- array(NA, dim=c(length(lon),length(lat),length(udates)))
str(f.arr)
if(iso.def == FALSE) isotherm <- min(pdt.i$MinTemp, na.rm = T)
# perform tag data integration
tag <- approx(pdt.i$Depth, pdt.i$MidTemp, xout = depth)
tag <- tag$y - isotherm
tag.ohc <- cp * rho * sum(tag, na.rm = T) / 10000
tag.ohc
tag
tag <- approx(pdt.i$Depth, pdt.i$MidTemp, xout = depth)
tag
tag <- tag$y - isotherm
tag.ohc <- cp * rho * sum(tag, na.rm = T) / 10000
# calc ohc for min/max temps for each day to calc sdx for dnorm
minTag <- approx(pdt.i$Depth, pdt.i$MinTemp, xout = depth)
minTag <- minTag$y - isotherm
minT.ohc <- cp * rho * sum(minTag, na.rm = T) / 10000
maxTag <- approx(pdt.i$Depth, pdt.i$MaxTemp, xout = depth)
maxTag <- maxTag$y - isotherm
maxT.ohc <- cp * rho * sum(maxTag, na.rm = T) / 10000
dat[dat<isotherm] <- NA
dat <- dat - isotherm
ohc <- cp * rho * apply(dat, 1:2, sum, na.rm = T) / 10000
image.plot(ohc)
list.r <- list(x = lon, y = lat, z = ohc)
ex <- extent(list.r)
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
r <- raster(t(list.r$z[,,ii]), xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
str(list.r)
r <- raster(t(list.r$z), xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
r <- flip(r, direction = 'y')
plot(r)
plot(countries,add=T)
plot(countriesLow,add=T)
w = matrix(1/9, nrow = 3, ncol = 3)
f <- focal(r, w, function(x) sd(x))
f.arr[,,i] <- t(as.matrix(flip(f,direction='y')))
image.plot(f.arr[,,i])
plot(f)
plot(f,zlim=c(0,2))
sdx <- f.arr[,,i]
lik <- dnorm(ohc, tag.ohc, sdx)
image.plot(lik)
str(ohc)
tag.ohc
lik <- dnorm(tag.ohc, mean=ohc, sd=sdx)
image.plot(dat[,,1])
image.plot(lik)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
fmat = list()
data("countriesLow")
#---------------------------------------------------------------#
# read in tag data
#---------------------------------------------------------------#
ptt <- 121325
iniloc <- data.frame(matrix(c(3, 3, 2013, 30.3917, -81.3802,
31, 8, 2013, 30.668, -79.972), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
pdt <- extract.pdt(pdt)
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
dts <- as.POSIXct(pdt$Date, format = findDateFormat(pdt$Date))
d1 <- as.POSIXct('1900-01-02') - as.POSIXct('1900-01-01')
didx <- dts >= (tag + d1) & dts <= (pop - d1)
pdt <- pdt[didx,]
lon = c(-90, -40)
lat = c(10, 55)
udates <- unique(as.Date(pdt$Date))
dateVec <- as.Date(seq(tag, pop, by = 'day'))
locs <- read.table(paste(ptt, '-Locations.csv', sep=''), sep=',', header = T, blank.lines.skip = F)
dts <- format(as.POSIXct(locs$Date, format = findDateFormat(locs$Date)), '%Y-%m-%d')
didx <- dts > (tag + d1) & dts < (pop - d1)
locs <- locs[didx,]
g <- setup.grid(locs, res = 'quarter') # make sure loading function from misc_funs.r
ngrid <- rev(dim(g$lon))
lon <- g$lon[1,]
lat <- g$lat[,1]
L.locs <- calc.locs(locs, iniloc, g, raster = T, dateVec = dateVec)
# try quick plot to check, if raster = 'stack' or 'brick' above
plot(L.locs[[4]])
plot(countriesLow, add = T)
limits = c(min(lon)-3, max(lon)+3, min(lat)-3, max(lat)+3)
woa.dir = '/Users/Cam/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/woa13_25deg_global_meantemp.nc'
return.woa = extract.woa(woa.dir, limits, resolution = 'quarter')
dat = return.woa$dat;
fmat = list()
i=1
r = flip(raster(t(dat[,,i,1])),2)
plot(r, col = tim.colors(100))
f1 = focal(r, w=matrix(1/9,nrow=3,ncol=3), fun=sd)
plot(f1, add=T)
plot(r, col = tim.colors(100))
f1 = focal(r, w=matrix(1/9,nrow=3,ncol=3), fun=sd)
plot(f1, add=T)
for(i in 1:57){
# for(j in 1:57){
r = flip(raster(t(dat[,,i,1])),2)
plot(r, col = tim.colors(100))
f1 = focal(r, w=matrix(1/9,nrow=3,ncol=3), fun=sd)
plot(f1, add=T)
fmat[[i]] = f1
# }
}
fmat = list()
for(i in 1:57){
# for(j in 1:57){
r = flip(raster(t(dat[,,i,1])),2)
#plot(r, col = tim.colors(100))
f1 = focal(r, w=matrix(1/9,nrow=3,ncol=3), fun=sd)
#plot(f1, add=T)
fmat[[i]] = f1
# }
}
cellStats(stack(fmat), 'summary')
pdf(height = 8, width = 10, file = 'woasd.pdf')
for(i in 1:57){
par(mfrow=c(1,2))
par(mar = c(2,2,2,6))
r = flip(raster(t(dat[,,i,1])),2)
plot(r, col = tim.colors(100))
title(paste0(depth[i], ' m'))
plot(fmat[[i]])
title('focal sd')
}
dev.off()
depth = return.woa$depth
dev.off()
pdf(height = 8, width = 10, file = 'woasd.pdf')
for(i in 1:57){
par(mfrow=c(1,2))
par(mar = c(2,2,2,6))
r = flip(raster(t(dat[,,i,1])),2)
plot(r, col = tim.colors(100))
title(paste0(depth[i], ' m'))
plot(fmat[[i]])
title('focal sd')
}
dev.off()
# compare to imager
gausskern <-
function(siz, sigma, muadv = 0){
x = 1:round(siz);
mu = c(mean(x), mean(x)) + muadv;
fx = (matrix(exp((-0.5*(x-mu[1])/sigma)^2))/(sqrt(2*pi)*sigma));
options(digits=5)
fx = exp(-.5*((x-mu[1])/sigma)^2)/sqrt((2*pi)*sigma)
fy = exp(-.5*((x-mu[2])/sigma)^2)/sqrt((2*pi)*sigma)
fx[!is.finite(fx)] = 0
#fy = (matrix(exp((-0.5*((x-mu[2])/sigma))^2))/(sqrt(2*pi)*sigma));
fy[!is.finite(fy)] = 0
kern = (fx%*%t(fy))
kern = kern/(sum(sum(kern,na.rm=T),na.rm=T))
kern[is.nan(kern)]=0
kern
}
d1 = 10
gk = gausskern(d1, 3)
gk = (array(gk, dim = c(10,10,1,1)))
r = flip(raster(t(dat[,,1,1])),2)
f1 = focal(r, w = gk[1:9,1:9,1,1], fun = mean, na.rm=T) #, fun = sum, na.rm=T
f1 = focal(r, w=matrix(1,nrow=9,ncol=9), fun = mean, na.rm=T)
f1 = t(as.matrix(flip(f1,2)))
ssti = as.cimg((fliplr(dat[,,1,1])))
ssti[is.na(ssti)] = 1e-15
sstc = fliplr(as.matrix(convolve(ssti, gk)))
sstc[sstc==1e-15] = NA
library(matlab)
install.packages('matlab')
library(matlab)
r = flip(raster(t(dat[,,1,1])),2)
f1 = focal(r, w = gk[1:9,1:9,1,1], fun = mean, na.rm=T) #, fun = sum, na.rm=T
f1 = focal(r, w=matrix(1,nrow=9,ncol=9), fun = mean, na.rm=T)
f1 = t(as.matrix(flip(f1,2)))
ssti = as.cimg((fliplr(dat[,,1,1])))
ssti[is.na(ssti)] = 1e-15
sstc = fliplr(as.matrix(convolve(ssti, gk)))
sstc[sstc==1e-15] = NA
par(mfrow=c(2,2))
image.plot(dat[,,1,1])
contour(dat[,,1,1], add=T, col='white')
title('woa Jan, 0 depth')
image.plot(f1, col = tim.colors(100))
contour(f1, add=T)
title('FOCAL')
image.plot(sstc)
title('CONV')
contour(sstc, add=T, col ='white')
image.plot(sstc-f1, zlim = c(-2,2))
contour(sstc, add=T, col ='white')
contour(f1, add=T)
title('COMPARE')
par(mfrow=c(2,2))
image.plot(dat[,,1,1])
contour(dat[,,1,1], add=T, col='white')
title('woa Jan, 0 depth')
image.plot(f1, col = tim.colors(100))
contour(f1, add=T)
title('FOCAL')
image.plot(sstc)
contour(sstc, add=T, col ='white')
title('CONV')
image.plot(sstc-f1, zlim = c(-2,2))
contour(f1, add=T)
contour(sstc, add=T, col ='white')
title('COMPARE')
woa1 = matrix(1:100/3, 10,10)
woa2 = matrix(1:100/3,10,10)
woa = as.matrix(rbind(woa1[1:5,],woa2[1:5,]))
extent = 3
r = flip(raster(t(woa)),2)
f1 = focal(r, w = matrix(1/(extent*extent),nrow = extent, ncol = extent), fun = sd)
woasd = as.matrix(1)
likint <- function(woa, minT, maxT, sdT){
matrix(vapply(woa, FUN = function(x) integrate(dnorm, lower = minT, upper = maxT , mean = x, sd = sdT)$value, FUN.VALUE = matrix(0,1,1)), dim(woa)[1], dim(woa)[2])
}
par(mfrow=c(2,2))
image.plot(woa)
contour(woa, levels=c(13,14), add=T)
image.plot(woasd)
image.plot(likint(woa, 13,14, 1))
image.plot(as.matrix(aaply(wlist, 1:2, .fun = function(x) integrate(dnorm, lower = 13, upper = 14 , mean = x[1], sd = x[2])$value)))
contour(woa, levels=c(13,14), add=T, col = 'white')
image.plot(woa)
graphics.off()
image.plot(woa)
contour(woa, levels=c(13,14), add=T)
image.plot(woasd)
image.plot(likint(woa, 13,14, 1))
image.plot(as.matrix(aaply(wlist, 1:2, .fun = function(x) integrate(dnorm, lower = 13, upper = 14 , mean = x[1], sd = x[2])$value)))
likint2 <- function(woa, woasd, minT, maxT){
wlist = array(1e-6, dim=c(dim(woa)[1], dim(woa)[2], 2))
wlist[,,1] = woa
wlist[,,2] = woasd
wlist[is.na(wlist)] = 1e-6
as.matrix(aaply(wlist, 1:2, .fun = function(x) integrate(dnorm, lower = minT, upper = maxT , mean = x[1], sd = x[2])$value))
}
image.plot(likint2(woa, woasd, 13, 14))
