#par(mfrow=c(3,1))
#image.plot(dat.i[,,depIdx[b]])
#image.plot(sd.i[,,depIdx[b]])
#image.plot(lik.pdt[,,b])
#dev.off()
print(paste(b,' loop within ',time,' iteration. ', Sys.time()))
}
pdf('compare likint.pdf',height=12,width=8)
par(mfrow=c(2,1))
for(b in 1:8){
image.plot(lon,lat,lik2.pdt[,,b])
plot(countriesLow,add=T)
title(paste('lik2 - depth ',woaDep[b]))
image.plot(lon,lat,lik3.pdt[,,b])
plot(countriesLow,add=T)
title('lik3')
}
lik2.pdt.prod <- apply(lik2.pdt, 1:2, prod, na.rm=F)
lik3.pdt.prod <- apply(lik3.pdt, 1:2, prod, na.rm=F)
image.plot(lon,lat,lik2.pdt.prod)
plot(countriesLow,add=T)
title('product of lik2 layers')
image.plot(lon,lat,lik3.pdt.prod)
plot(countriesLow,add=T)
title('product of lik3 layers')
dev.off()
library(dplyr)
likint3 <- function(woa, woasd, minT, maxT){
# wlist = array(1e-6, dim=c(dim(woa)[1], dim(woa)[2], 2))
wdf = data.frame(woa = as.vector(woa), sd = as.vector(woasd))
wdf[is.na(wdf)] = 1e-6
#      wdf = add_rownames(wdf)
#      wrow = group_by(wdf, rowname)
#      wlist[,,1] = woa
#      wlist[,,2] = woasd
#      wlist[is.na(wlist)] = 1e-6
# matrix(do(wdf, .fun = function(x) integrate(dnorm, lower = minT, upper = maxT , mean = x[1], sd = x[2])$value), dim(woa)[1], dim(woa)[2])
# res = wdf %>% rowwise() %>% do(integrate(dnorm, lower = minT, upper = maxT, mean = woa, sd = sd)$value)
res = wdf %>% rowwise() %>% do(function(x) dnorm(10, mean = woa, sd = sd))
}
t1 = Sys.time()
image.plot(likint3(dat.i[,,b], sd.i[,,b], df[b,1], df[b,2]))
t2 = Sys.time()
t2-t1
sst.dir <- '~/Documents/WHOI/RCode/sharkSiteMap/data/'
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
likint3
setwd('~/Documents/WHOI/RData/WhiteSharks/2013/121325/')
data("countriesLow")
#---------------------------------------------------------------#
# read in tag data
#---------------------------------------------------------------#
ptt <- 121325
iniloc <- data.frame(matrix(c(3, 3, 2013, 30.3917, -81.3802,
31, 8, 2013, 30.668, -79.972), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
pdt <- extract.pdt(pdt)
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
dts <- as.POSIXct(pdt$Date, format = findDateFormat(pdt$Date))
d1 <- as.POSIXct('1900-01-02') - as.POSIXct('1900-01-01')
didx <- dts >= (tag + d1) & dts <= (pop - d1)
pdt <- pdt[didx,]
lon = c(-90, -40)
lat = c(10, 55)
udates <- unique(as.Date(pdt$Date))
dateVec <- as.Date(seq(tag, pop, by = 'day'))
str(pdt)
head(pdt)
tag.sst <- read.table(paste(ptt, '-SST.csv', sep=''), sep=',',header=T, blank.lines.skip=F)
str(tag.sst)
tag.sst <- read.table(paste(ptt, '-SST.csv', sep=''), sep=',',header=T, blank.lines.skip=F)
dts <- as.POSIXct(tag.sst$Date, format = findDateFormat(tag.sst$Date))
head(dts)
didx <- dts >= (tag + d1) & dts <= (pop - d1)
tag.sst <- tag.sst[didx,]
str(tag.sst)
tagdata <- tag.sst
dts <- as.POSIXct(tagdata$Date, format = findDateFormat(tagdata$Date))
head(dts)
as.Date(head(dts))
dts <- as.POSIXct(tagdata$Date, format = findDateFormat(tagdata$Date))
# get unique DAILY time points
udates <- unique(as.Date(dts))
T <- length(udates)
T
i=1
time <- udates[i]
time
sst.i <- tagdata[i,]$Temperature
sst.i
str(tagdata)
which(!duplicated(as.Date(dts)))
head(tagdata)
which(duplicated(as.Date(dts)))
T <- length(dts)
T
time <- dts[i]
time
idx <- which(as.Date(dts) == as.Date(time))
idx
head(tagdata)
i=7
time <- dts[i]
idx <- which(as.Date(dts) == as.Date(time))
idx
sst.i <- tagdata[idx,]$Temperature
sst.i
head(tagdata)
tagdata[1:10,]
mean(21)
mean(c(21,22))
time <- as.Date(dts[i])
idx <- which(as.Date(dts) == time)
sst.i <- mean(tagdata[idx,]$Temperature)
sst.i
nc <- open.ncdf(paste(sst.dir,'2015-12-15_g1sst.nc',sep=''))
nc
dat <- get.var.ncdf(nc, 'analysed_sst')
dat <- get.var.ncdf(nc, 'SST')
str(dat)
lon <- get.var.ncdf(nc, 'longitude')
lat <- get.var.ncdf(nc, 'latitude')
image.plot(lon,lat,dat)
str(lon)
str(lat)
time
rge <- c(min(lon),max(lon),min(lat),max(lat))
rge
get.oi.sst(rge[1:2],rge[3:4],time,filename=paste('_-',time,'.nc',sep=''),download.file=TRUE,dir=sst.dir) # filenames based on dates from above
sst.dir
nc <- open.ncdf(paste(sst.dir, ptt, '_', as.Date(time), '.nc', sep='')) #add lat lon in filename '.nc', sep=''))
nc
dat <- get.var.ncdf(nc, 'analysed_sst') # for OI SST
str(dat)
lon <- get.var.ncdf(nc, 'longitude')
lat <- get.var.ncdf(nc, 'latitude')
image.plot(lon,lat,dat)
plot(countriesLow,add=T)
pdf('sst_try.pdf',height=8,width=12)
image.plot(lon,lat,dat)
plot(countriesLow,add=T)
dev.off()
sst.i <- tagdata[idx,]$Temperature
sst.i
sst.i=sst.i[1]
sst.i
sst.i <- c(sst.i-sst.i*.1, sst.i+sst.i*.1)
sst.i
sst.i <- tagdata[idx,]$Temperature[1]
sst.i <- c(sst.i-sst.i*.01, sst.i+sst.i*.01)
sst.i
sst.i <- tagdata[idx,]$Temperature[1]
.99*sst.i
sst.i <- range(tagdata[idx,]$Temperature)
sst.i
sst.i*1.01
sst.i <- range(tagdata[idx,]$Temperature)
sst.i <- c(sst.i[1] * .99, sst.i[2] * 1.01) # sensor error
sst.i
lon
dts <- as.POSIXct(tagdata$Date, format = findDateFormat(tagdata$Date))
head(dts)
T <- length(dts)
T
i=1
time <- as.Date(dts[i])
time
i=2
time <- as.Date(dts[i])
time
i=1
time <- as.Date(dts[i])
idx <- which(as.Date(dts) == time)
length(idx) > 1
sst.i <- range(tagdata[idx,]$Temperature)
sst.i <- c(sst.i[1] * .99, sst.i[2] * 1.01) # sensor error
sst.i
nc <- open.ncdf(paste(sst.dir, ptt, '_', as.Date(time), '.nc', sep='')) #add lat lon in filename '.nc', sep=''))
i=7
time <- as.Date(dts[i])
time
idx <- which(as.Date(dts) == time)
idx
if(length(idx) > 1){
sst.i <- range(tagdata[idx,]$Temperature)
sst.i <- c(sst.i[1] * .99, sst.i[2] * 1.01) # sensor error
} else{
sst.i <- tagdata[idx,]$Temperature
sst.i <- c(csst.i * .99, sst.i * 1.01) # sensor error
}
sst.i
nc <- open.ncdf(paste(sst.dir, ptt, '_', as.Date(time), '.nc', sep='')) #add lat lon in filename '.nc', sep=''))
dat <- get.var.ncdf(nc, 'analysed_sst') # for OI SST
t = Sys.time()
r = flip(raster(t(dat)),2)
sdx = focal(r, w=matrix(1,nrow=3,ncol=3), fun=function(x) sd(x, na.rm = T))
sdx = t(as.matrix(flip(sdx,2)))
print(paste('finishing sd for ', time,'. Section took ', Sys.time() - t))
graphics.off()
image.plot(lon,lat,sdx)
t = Sys.time()
lik.ohc <- likint3(dat, sdx, sst.i[1], sst.i[2])
print(paste('finishing lik.ohc for ', time,'. Section took ', Sys.time() - t))
image.plot(lon,lat,lik.ohc)
rm(lik.ohc)
lik.sst <- likint3(dat, sdx, sst.i[1], sst.i[2])
pdf('try sst.pdf',height=12,width=8)
par(mfrow=c(3,1))
image.plot(lon,lat,dat)
plot(countriesLow,add=T)
image.plot(lon,lat,sdx)
plot(countriesLow,add=T)
image.plot(lon,lat,lik.sst)
plot(countriesLow,add=T)
dev.off()
sst.i
pdf('try sst.pdf',height=12,width=8)
par(mfrow=c(3,1))
image.plot(lon,lat,dat)
contour(lon,lat,dat,add=T)
plot(countriesLow,add=T)
image.plot(lon,lat,sdx)
plot(countriesLow,add=T)
image.plot(lon,lat,lik.sst)
plot(countriesLow,add=T)
dev.off()
?contour
pdf('try sst.pdf',height=12,width=8)
par(mfrow=c(3,1))
image.plot(lon,lat,dat)
contour(lon,lat,dat,levels=c(10,21,28),add=T)
plot(countriesLow,add=T)
image.plot(lon,lat,sdx)
plot(countriesLow,add=T)
image.plot(lon,lat,lik.sst)
plot(countriesLow,add=T)
dev.off()
pdf('try sst.pdf',height=12,width=8)
par(mfrow=c(3,1))
image.plot(lon,lat,dat)
contour(lon,lat,dat,levels=c(10,21,28),add=T)
plot(countriesLow,add=T)
image.plot(lon,lat,sdx)
contour(lon,lat,dat,levels=c(10,21,28),add=T,col='white')
plot(countriesLow,add=T)
image.plot(lon,lat,lik.sst)
contour(lon,lat,dat,levels=c(10,21,28),add=T,col='white')
plot(countriesLow,add=T)
dev.off()
str(tag.sst)
head(tag.sst)
?summarise
by_dte <- tag.sst %>% group_by(as.Date(Date))
str(by_dte)
by_dte
str(tag.sst)
summarise(group_by(tag.sst, as.Date(Date), range(Temperature)))
summarise(group_by(tag.sst, as.Date(Date), mean(Temperature)))
as.Date(tag.sst$Date[1])
?as.Date
head(dts)
str(dts)
summarise(group_by(tag.sst, as.Date(dts), mean(Temperature)))
head(tag.sst)
??group
by_dte <- group_by(tag.sst, as.Date(dts))
by_dte
str(tag.sst)
tag.sst[,12] = as.Date(dts)
str(tag.sst)
head(tag.sst)
by_dte <- group_by(tag.sst, V12)
by_dte
summarise(by_dte, range(Temperature))
summarise(by_dte, min(Temperature), max(Temperature))
c(ncol(tagdata)+1)
str(tagdata)
data.frame(summarise(by_dte, min(Temperature), max(Temperature)))
tagdata[,c(ncol(tagdata)+1)] <- as.Date(dts)
by_dte <- group_by(tag.sst, V12)
tagdata <- data.frame(summarise(by_dte, min(Temperature), max(Temperature)))
colnames(tagdata) <- list('date','minT','maxT')
str(tagdata)
udates <- unique(tagdata$date)
str(udates)
time <- tagdata$date[i]
time
i
i=4
time <- tagdata$date[i]
time
i=5
time <- tagdata$date[i]
time
sst.i <- c(tagdata$minT[i] * .99, tagdata$maxT[i] * 1.01) # sensor error
sst.i
?countriesLow
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
setwd('~/Documents/WHOI/RData/WhiteSharks/2013/121325/')
data("countriesLow")
#---------------------------------------------------------------#
# read in tag data
#---------------------------------------------------------------#
ptt <- 121325
iniloc <- data.frame(matrix(c(3, 3, 2013, 30.3917, -81.3802,
31, 8, 2013, 30.668, -79.972), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
pdt <- extract.pdt(pdt)
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
dts <- as.POSIXct(pdt$Date, format = findDateFormat(pdt$Date))
d1 <- as.POSIXct('1900-01-02') - as.POSIXct('1900-01-01')
didx <- dts >= (tag + d1) & dts <= (pop - d1)
pdt <- pdt[didx,]
lon = c(-90, -40)
lat = c(10, 55)
udates <- unique(as.Date(pdt$Date))
dateVec <- as.Date(seq(tag, pop, by = 'day'))
tag.sst <- read.table(paste(ptt, '-SST.csv', sep=''), sep=',',header=T, blank.lines.skip=F)
dts <- as.POSIXct(tag.sst$Date, format = findDateFormat(tag.sst$Date))
didx <- dts >= (tag + d1) & dts <= (pop - d1)
tag.sst <- tag.sst[didx,]
dts <- as.POSIXct(tagdata$Date, format = findDateFormat(tagdata$Date))
udates <- unique(as.Date(dts))
sst.dir <- paste('~/Documents/WHOI/RData/SST/OI/', ptt, '/',sep = '')
str(tag.sst)
dts <- as.POSIXct(tag.sst$Date, format = findDateFormat(tag.sst$Date))
udates <- unique(as.Date(dts))
sst.dir <- paste('~/Documents/WHOI/RData/SST/OI/', ptt, '/',sep = '')
length(udates)
time <- as.Date(udates[i])
i=1
lims <- c(min(lon),max(lon),min(lat),max(lat))
limes
lims
get.oi.sst(lims[1:2],lims[3:4],time,filename=paste(ptt,'_',time,'.nc',sep=''),download.file=TRUE,dir=sst.dir) # filenames based on dates from above
time
time <- as.Date(udates[i])
time
get.oi.sst(lims[1:2],lims[3:4],time,filename=paste(ptt,'_',time,'.nc',sep=''),download.file=TRUE,dir=sst.dir) # filenames based on dates from above
L.sst <- calc.sst(tag.sst, sst.dir = sst.dir, dateVec = dateVec)
str(tag.sst)
calc.sst <- function(tagdata, sst.dir, g, dateVec, raster = 'stack'){
# compare tag sst data to oi sst map and calculate likelihoods
#' @param: tagdata is variable containing tag-collected SST data
#' @param: sst.dir is local directory where get.hycom downloads are
#' stored.
#' @return: likelihood is array of likelihood surfaces representing
#' matches between tag-based sst and oi sst maps
dts <- as.POSIXct(tagdata$Date, format = findDateFormat(tagdata$Date))
tagdata[,12] <- as.Date(dts)
by_dte <- group_by(tag.sst, V12)  # group by unique DAILY time points
tagdata <- data.frame(summarise(by_dte, min(Temperature), max(Temperature)))
colnames(tagdata) <- list('date','minT','maxT')
T <- length(tagdata[,1])
for(i in 1:T){
time <- tagdata$date[i]
sst.i <- c(tagdata$minT[i] * .99, tagdata$maxT[i] * 1.01) # sensor error
# open day's sst data
nc <- open.ncdf(paste(sst.dir, ptt, '_', as.Date(time), '.nc', sep='')) #add lat lon in filename '.nc', sep=''))
dat <- get.var.ncdf(nc, 'analysed_sst') # for OI SST
# calc sd of SST
# focal calc on mean temp and write to sd var
t = Sys.time()
r = flip(raster(t(dat)),2)
sdx = focal(r, w=matrix(1,nrow=3,ncol=3), fun=function(x) sd(x, na.rm = T))
sdx = t(as.matrix(flip(sdx,2)))
print(paste('finishing sd for ', time,'. Section took ', Sys.time() - t))
# compare sst to that day's tag-based ohc
t = Sys.time()
lik.sst <- likint3(dat, sdx, sst.i[1], sst.i[2])
print(paste('finishing lik.sst for ', time,'. Section took ', Sys.time() - t))
if(i == 1){
lon <- get.var.ncdf(nc, 'longitude')
lat <- get.var.ncdf(nc, 'latitude')
# result will be array of likelihood surfaces
L.sst <- array(0, dim = c(dim(lik.sst), length(dateVec)))
}
idx <- which(dateVec == as.Date(time))
L.sst[,,idx] = lik.sst
}
#    crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
#    list.sst <- list(x = lon, y = lat, z = L.sst)
#    ex <- extent(list.sst)
#    L.sst <- brick(list.sst$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], transpose=T, crs)
#    L.sst <- flip(L.sst, direction = 'y')
#    # make L.sst match resolution/extent of g
#    row <- dim(g$lon)[1]
#    col <- dim(g$lon)[2]
#    ex <- extent(c(min(g$lon[1,]), max(g$lon[1,]), min(g$lat[,1]), max(g$lat[,1])))
#    crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
#    rasMatch <- raster(ex, nrows=row, ncols=col, crs = crs)
#    L.sst <- spatial_sync_raster(L.sst, rasMatch)
#    if(raster == 'brick'){
#      s <- L.sst
#    } else if(raster == 'stack'){
#      s <- stack(L.sst)
#    } else if(raster == 'array'){
#      s <- raster::as.array(L.sst, transpose = T)
#    }
print(class(L.sst))
# return sst likelihood surfaces
return(L.sst)
}
#pdf('try sst.pdf',height=12,width=8)
#par(mfrow=c(3,1))
#image.plot(lon,lat,dat)
#contour(lon,lat,dat,levels=c(10,21,28),add=T)
#plot(countriesLow,add=T)
#image.plot(lon,lat,sdx)
#contour(lon,lat,dat,levels=c(10,21,28),add=T,col='white')
#plot(countriesLow,add=T)
#image.plot(lon,lat,lik.sst)
#contour(lon,lat,dat,levels=c(10,21,28),add=T,col='white')
#plot(countriesLow,add=T)
#dev.off()
L.sst <- calc.sst(tag.sst, sst.dir = sst.dir, dateVec = dateVec)
tagdata = tag.sst
dts <- as.POSIXct(tagdata$Date, format = findDateFormat(tagdata$Date))
tagdata[,12] <- as.Date(dts)
by_dte <- group_by(tag.sst, V12)  # group by unique DAILY time points
str(tagdata)
calc.sst <- function(tagdata, sst.dir, g, dateVec, raster = 'stack'){
# compare tag sst data to oi sst map and calculate likelihoods
#' @param: tagdata is variable containing tag-collected SST data
#' @param: sst.dir is local directory where get.hycom downloads are
#' stored.
#' @return: likelihood is array of likelihood surfaces representing
#' matches between tag-based sst and oi sst maps
dts <- as.POSIXct(tagdata$Date, format = findDateFormat(tagdata$Date))
tagdata[,12] <- as.Date(dts)
by_dte <- group_by(tagdata, V12)  # group by unique DAILY time points
tagdata <- data.frame(summarise(by_dte, min(Temperature), max(Temperature)))
colnames(tagdata) <- list('date','minT','maxT')
T <- length(tagdata[,1])
for(i in 1:T){
time <- tagdata$date[i]
sst.i <- c(tagdata$minT[i] * .99, tagdata$maxT[i] * 1.01) # sensor error
# open day's sst data
nc <- open.ncdf(paste(sst.dir, ptt, '_', as.Date(time), '.nc', sep='')) #add lat lon in filename '.nc', sep=''))
dat <- get.var.ncdf(nc, 'analysed_sst') # for OI SST
# calc sd of SST
# focal calc on mean temp and write to sd var
t = Sys.time()
r = flip(raster(t(dat)),2)
sdx = focal(r, w=matrix(1,nrow=3,ncol=3), fun=function(x) sd(x, na.rm = T))
sdx = t(as.matrix(flip(sdx,2)))
print(paste('finishing sd for ', time,'. Section took ', Sys.time() - t))
# compare sst to that day's tag-based ohc
t = Sys.time()
lik.sst <- likint3(dat, sdx, sst.i[1], sst.i[2])
print(paste('finishing lik.sst for ', time,'. Section took ', Sys.time() - t))
if(i == 1){
lon <- get.var.ncdf(nc, 'longitude')
lat <- get.var.ncdf(nc, 'latitude')
# result will be array of likelihood surfaces
L.sst <- array(0, dim = c(dim(lik.sst), length(dateVec)))
}
idx <- which(dateVec == as.Date(time))
L.sst[,,idx] = lik.sst
}
#    crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
#    list.sst <- list(x = lon, y = lat, z = L.sst)
#    ex <- extent(list.sst)
#    L.sst <- brick(list.sst$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], transpose=T, crs)
#    L.sst <- flip(L.sst, direction = 'y')
#    # make L.sst match resolution/extent of g
#    row <- dim(g$lon)[1]
#    col <- dim(g$lon)[2]
#    ex <- extent(c(min(g$lon[1,]), max(g$lon[1,]), min(g$lat[,1]), max(g$lat[,1])))
#    crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
#    rasMatch <- raster(ex, nrows=row, ncols=col, crs = crs)
#    L.sst <- spatial_sync_raster(L.sst, rasMatch)
#    if(raster == 'brick'){
#      s <- L.sst
#    } else if(raster == 'stack'){
#      s <- stack(L.sst)
#    } else if(raster == 'array'){
#      s <- raster::as.array(L.sst, transpose = T)
#    }
print(class(L.sst))
# return sst likelihood surfaces
return(L.sst)
}
#pdf('try sst.pdf',height=12,width=8)
#par(mfrow=c(3,1))
#image.plot(lon,lat,dat)
#contour(lon,lat,dat,levels=c(10,21,28),add=T)
#plot(countriesLow,add=T)
#image.plot(lon,lat,sdx)
#contour(lon,lat,dat,levels=c(10,21,28),add=T,col='white')
#plot(countriesLow,add=T)
#image.plot(lon,lat,lik.sst)
#contour(lon,lat,dat,levels=c(10,21,28),add=T,col='white')
#plot(countriesLow,add=T)
#dev.off()
L.sst <- calc.sst(tag.sst, sst.dir = sst.dir, dateVec = dateVec)
str(L.sst)
image.plot(lon,lat,L.sst[,,40])
str(lon)
lon <- get.var.ncdf(nc, 'longitude')
nc <- open.ncdf(paste(sst.dir, ptt, '_', as.Date(time), '.nc', sep='')) #add lat lon in filename '.nc', sep=''))
lon <- get.var.ncdf(nc, 'longitude')
lat <- get.var.ncdf(nc, 'latitude')
image.plot(lon,lat,L.sst[,,40])
image.plot(lon,lat,L.sst[,,60])
image.plot(lon,lat,L.sst[,,80])
plot(countriesLow,add=TRUE)
