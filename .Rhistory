image.plot(lon,lat,L.locs[,,30])
setwd('~/Documents/WHOI/RData/BaskingSharks/2008/88143/')
ptt <- 88143
iniloc <- data.frame(matrix(c(11, 10, 2008, 42.0650, -70.2893,
1, 10, 2009, 42.105, -68.34), nrow = 2, ncol = 5, byrow = T))
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 2)
pdt <- extract.pdt(pdt)
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
dts <- as.POSIXct(pdt$Date, format = findDateFormat(pdt$Date))
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
setwd('~/Documents/WHOI/RData/BaskingSharks/2008/88143/')
ptt <- 88143
iniloc <- data.frame(matrix(c(11, 10, 2008, 42.0650, -70.2893,
1, 10, 2009, 42.105, -68.34), nrow = 2, ncol = 5, byrow = T))
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 2)
pdt <- extract.pdt(pdt)
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
dts <- as.POSIXct(pdt$Date, format = findDateFormat(pdt$Date))
didx <- dts >= tag & dts <= pop
pdt <- pdt[didx,]
lon = c(-90, -30)
lat = c(-30, 50)
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/', ptt, '/',sep = '')
udates <- unique(as.Date(pdt$Date))
limits = c(lon, lat) # (min long, max long, min lat, max lat)
nc.dir = '/Users/Cam/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/'
return.woa = extract.woa(nc.dir, limits, resolution = 'quarter')
dat = return.woa$dat; lon = return.woa$lon; lat = return.woa$lat; depth = return.woa$depth
# eliminate Pacific from matching
dat = removePacific(dat, lat, lon)
# perform matching
L.pdt = calc.pdt(pdt, dat, lat, lon)
str(L.pdt)
list.pdt <- list(x=lon,y=lat,z=L.pdt)
L.pdt <- rasterizeStack(L.pdt, lon, lat)
library(raster)
L.pdt <- rasterizeStack(L.pdt, lon, lat)
ex <- extent(list.pdt)
br <- brick(list.pdt$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4])
str(ex)
str(br)
plot(br)
locs <- read.table(paste(ptt, '-Locations.csv', sep=''), sep=',', header = T, blank.lines.skip = F)
#light <- light[light$Type == 'GPE',]
dts <- format(as.POSIXct(locs$Date, format = findDateFormat(locs$Date)), '%Y-%m-%d')
didx <- dts > tag & dts < pop
locs <- locs[didx,]
ngrid <- c(limits[2] - limits[1], limits[4] - limits[3])
g <- setup.grid(locs)
lon <- g$lon[1,]
lat <- g$lat[,1]
# tag and pop locations
#iniloc = data.frame(matrix(c(-41.38018333,30.39173333,-52.24500,36.688),
#                           nrow=2,ncol=2,byrow=T))
colnames(iniloc) = list('day','month','year','lat','lon')
L.locs <- lik.locs(locs, iniloc, g)
str(L.locs)
str(br[[1]])
plot(br[[1]])
plot(br[[10]])
plot(br[[50]])
str(list.pdt)
mat <- as.matrix(br[[50]])
str(mat)
image.plot(mat)
ex
plot(br[[50]],xlim=c(-30,-90),ylim=c(-30,50))
?plotraster
plot(br[[50]],ext=ex
)
br <- brick(t(list.pdt$z), xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4])
str(dat)
f <- dat
r <- raster(t(f[,,1,1]),xmn=-90,xmx=-40,ymx=55,ymn=10)
r <- flip(r,direction='y')
plot(r)
plot(countriesLow, add = TRUE)
data(countriesLow)
plot(countriesLow, add = TRUE)
ex
r <- raster(t(f[,,1,1]),xmn=-90,xmx=-30,ymx=50,ymn=-30)
r <- flip(r,direction='y')
plot(r)
plot(countriesLow, add = TRUE)
projection(r) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
newproj <- CRS("+init=epsg:4705")
pr1 <- projectRaster(r, crs=newproj)
plot(pr1)
plot(countriesLow, add = TRUE)
str(L.locs)
str(g)
length(lon)
?extent
summary(lon)
summary(lat)
L.ext <- extent(xmin=min(lon),xmax=max(lon),ymax=max(lat),ymin=min(lat))
min(lon)
max(lon)
max(lat)
min(lat)
L.ext <- extent(c(xmin=min(lon),xmax=max(lon),ymax=max(lat),ymin=min(lat)))
L.ext
?raster
L.ext[1]
L.ext <- extent(c(xmin=min(lon),xmax=max(lon),ymax=max(lat),ymin=min(lat)))
l <- raster(t(L.locs[,,1]),xmn=L.ext[1],xmx=L.ext[2],ymx=L.ext[4],ymn=L.ext[3])
str(l)
plot(l)
l <- raster(L.locs[,,1],xmn=L.ext[1],xmx=L.ext[2],ymx=L.ext[4],ymn=L.ext[3])
L.ext <- extent(c(xmin=min(lon),xmax=max(lon),ymax=max(lat),ymin=min(lat)))
l <- raster(L.locs[,,1],xmn=L.ext[1],xmx=L.ext[2],ymx=L.ext[4],ymn=L.ext[3])
L.ext
lon <- g$lon[1,]
lat <- g$lat[,1]
lon
lat
limits
summary(locs)
L.ext
max(lat)
min(lat)
L.ext <- extent(c(xmin=min(lon),xmax=max(lon),ymin=min(lat),ymax=max(lat)))
l <- raster(L.locs[,,1],xmn=L.ext[1],xmx=L.ext[2],ymx=L.ext[3],ymn=L.ext[4])
L.ext
l <- raster(t(L.locs[,,1]),xmn=L.ext[1],xmx=L.ext[2],ymx=L.ext[3],ymn=L.ext[4])
l <- raster(t(L.locs[,,1]),xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
plot(l)
l <- raster(t(L.locs[,,5]),xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
l <- raster(t(L.locs[,,50]),xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
l <- raster(t(L.locs[,,30]),xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
plot(l)
plot(countriesLow,add=T)
l <- raster(t(L.locs[,,1]),xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
plot(l)
plot(countriesLow,add=T)
str(l)
plot(r)
l <- raster(t(L.locs[,,30]),xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
plot(l)
library(spatialtools)
library(spatial.tools)
install.packages('spatial.tools')
library(spatial.tools)
ll <- spatial_sync_raster(l,r)
ll <- spatial_sync_raster(l,r,method='ngb')
ll <- spatial_sync_raster(r,l,method='ngb')
projection(l) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
projection(r) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
ll <- spatial_sync_raster(l,r,method='ngb')
plot(ll)
plot(countriesLow,add=T)
plot(r,add=TRUE)
L.locs[[3]]
str(L.locs)
t(L.locs[,,])
l <- brick(L.locs,xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
str(l)
plot(l[[3]])
l <- t(l)
plot(l[[3]])
extent
L.ext
plot(countriesLow,add=T)
l <- brick(L.locs,xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
l <- flip(l,direction='y')
plot(l[[1]])
plot(l[[3]])
l <- brick(L.locs,xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
l <- flip(l,direction='x')
plot(l[[3]])
l <- brick(L.locs,xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4])
l <- transpose(l)
?transpose
l <- t(l)
plot(l[[3]])
l <- brick(L.locs,xmn=L.ext[3],xmx=L.ext[4],ymn=L.ext[1],ymx=L.ext[2])
l <- t(l)
plot(l[[3]])
plot(countriesLow,add=T)
projection(l) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
plot(br,add=T)
plot(l[[3]])
plot(countriesLow,add=T)
plot(br[[1]],add=T)
plot(t(br[[1]]),add=T)
list.pdt <- list(x=lon,y=lat,z=L.pdt)
ex <- extent(list.pdt)
br <- brick(list.pdt$z, xmn=ex[3], xmx=ex[4], ymn=ex[1], ymx=ex[2])
br <- t(br)
projection(br) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
plot(br[[1]])
plot(br[[5]])
plot(br[[10]])
plot(br[[30]])
plot(br[[30]])
plot(countriesLow,add=T)
ex
dat = return.woa$dat; lon = return.woa$lon; lat = return.woa$lat; depth = return.woa$depth
list.pdt <- list(x=lon,y=lat,z=L.pdt)
ex <- extent(list.pdt)
br <- brick(list.pdt$z, xmn=ex[3], xmx=ex[4], ymn=ex[1], ymx=ex[2])
br <- t(br)
projection(br) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
plot(br[[30]])
plot(countriesLow,add=T)
ex
ex[3]
br <- brick(list.pdt$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4])
projection(br) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
plot(br[[30]])
plot(countriesLow,add=T)
br <- t(br)
projection(br) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
plot(br[[30]])
plot(countriesLow,add=T)
br <- brick(L.pdt), xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4])
br <- brick(L.pdt, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4])
br <- t(br)
projection(br) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
plot(br[[30]])
plot(countriesLow,add=T)
br <- brick(L.pdt, xmn=ex[3], xmx=ex[4], ymn=ex[1], ymx=ex[2])
br <- t(br)
projection(br) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
plot(br[[30]])
plot(countriesLow,add=T)
br <- brick(L.pdt, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4])
br <- flip(br,direction='y')
projection(br) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
plot(br[[30]])
plot(countriesLow,add=T)
plot(br[[30]])
br <- brick(L.pdt, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4])
plot(br[[30]])
?rotate
br <- brick(L.pdt, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4])
plot(br[[30]])
str(L.pdt)
length(lon)
str(list.pdt$z)
ex
?brick
br <- brick(L.pdt, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4],transpose=T)
plot(br[[30]])
br <- brick(L.pdt, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4],transpose=F)
plot(br[[30]])
br <- brick(L.pdt, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4],transpose=T)
plot(br[[30]])
br <- flip(br,direction='y')
#projection(br) <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
plot(br[[30]])
plot(countriesLow,add=T)
br[[30]]
l <- brick(L.locs,xmn=L.ext[3],xmx=L.ext[4],ymn=L.ext[1],ymx=L.ext[2],transpose=T)
plot(l)
plot(l[[2]])
plot(countriesLow,add=T)
l <- brick(L.locs,xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4],transpose=T)
plot(l[[2]])
plot(countriesLow,add=T)
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
l <- brick(L.locs,xmn=L.ext[1],xmx=L.ext[2],ymn=L.ext[3],ymx=L.ext[4],transpose=T,crs)
projection(l)
br <- brick(L.pdt, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4],transpose=T,crs)
br <- flip(br,direction='y')
sync.l <- spatial_sync_raster(l,br)
plot(sync.l[[5]])
plot(countriesLow,add=T)
sync.l
br
bra <- as.array(br)
str(bra)
la <- as.array(sync.l)
str(la)
str(g)
g$lon[1,]
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
setwd('~/Documents/WHOI/RData/BaskingSharks/2008/88143/')
ptt <- 88143
iniloc <- data.frame(matrix(c(11, 10, 2008, 42.0650, -70.2893,
1, 10, 2009, 42.105, -68.34), nrow = 2, ncol = 5, byrow = T))
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 2)
pdt <- extract.pdt(pdt)
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
dts <- as.POSIXct(pdt$Date, format = findDateFormat(pdt$Date))
didx <- dts >= tag & dts <= pop
pdt <- pdt[didx,]
lon = c(-90, -30)
lat = c(-30, 50)
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/', ptt, '/',sep = '')
udates <- unique(as.Date(pdt$Date))
limits = c(lon, lat) # (min long, max long, min lat, max lat)
nc.dir = '/Users/Cam/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/'
return.woa = extract.woa(nc.dir, limits, resolution = 'quarter')
dat = return.woa$dat; lon = return.woa$lon; lat = return.woa$lat; depth = return.woa$depth
# eliminate Pacific from matching
dat = removePacific(dat, lat, lon)
# perform matching
L.pdt = calc.pdt(pdt, dat, lat, lon, raster = T)
class(L.pdt)
L.pdt
plot(L.pdt[[30]])
plot(countriesLow,add=T)
plot(L.pdt[[100]])
plot(countriesLow,add=T)
locs <- read.table(paste(ptt, '-Locations.csv', sep=''), sep=',', header = T, blank.lines.skip = F)
#light <- light[light$Type == 'GPE',]
dts <- format(as.POSIXct(locs$Date, format = findDateFormat(locs$Date)), '%Y-%m-%d')
didx <- dts > tag & dts < pop
locs <- locs[didx,]
ngrid <- c(limits[2] - limits[1], limits[4] - limits[3])
g <- setup.grid(locs)
lon <- g$lon[1,]
lat <- g$lat[,1]
colnames(iniloc) = list('day','month','year','lat','lon')
L.locs <- lik.locs(locs, iniloc, g, raster = T)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L.locs <- lik.locs(locs, iniloc, g, raster = T)
L.locs
plot(L.locs[[10]])
plot(countriesLow, add = T)
setwd('~/Documents/WHOI/RData/Swords/2013/106795/')
ptt <- 106795
iniloc <- data.frame(matrix(c(27, 9, 2013, 46.47683333, -45.5640,
2, 11, 2013, 30.92645, -39.6919), nrow = 2, ncol = 5, byrow = T))
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 2)
pdt <- extract.pdt(pdt)
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
dts <- as.POSIXct(pdt$Date, format = findDateFormat(pdt$Date))
didx <- dts >= tag & dts <= pop
pdt <- pdt[didx,]
iniloc
lon = c(-70, -15)
lat = c(20, 60)
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/', ptt, '/',sep = '')
udates <- unique(as.Date(pdt$Date))
isotherm = ''
cp <- 3.993 # kJ/kg*C <- heat capacity of seawater
rho <- 1025 # kg/m3 <- assumed density of seawater
pdt$MidTemp <- (pdt$MaxTemp + pdt$MinTemp) / 2
# get unique time points
udates <- unique(pdt$Date)
ohcVec <- vector(0, length = length(udates))
length(udates)
ohcVec <- vector(0, length = length(udates))
?vector
ohcVec <- as.vector(0, length = length(udates))
?rep
ohcVec <- rep(0, length.out = length(udates))
if(isotherm != '') iso.def <- TRUE else iso.def <- FALSE
i=1
time <- udates[i]
time
nc <- open.ncdf(paste(ohc.dir, ptt, '_-', as.Date(time), '.nc', sep=''))
dat <- get.var.ncdf(nc, 'temperature')
depth <- get.var.ncdf(nc, 'Depth')
lon <- get.var.ncdf(nc, 'Longitude')
paste(ohc.dir, ptt, '_', as.Date(time), '.nc', sep='')
nc <- open.ncdf(paste(ohc.dir, ptt, '_-', as.Date(time), '.nc', sep=''))
nc
dat <- get.var.ncdf(nc, 'Water Temperature')
dat <- get.var.ncdf(nc, 'water_temp')
depth <- get.var.ncdf(nc, 'depth')
lon <- get.var.ncdf(nc, 'lon')
lat <- get.var.ncdf(nc, 'lat')
pdt.i <- pdt[which(pdt$Date == time),]
# calculate daily isotherm based on tag data
if(iso.def == FALSE) isotherm <- min(pdt.i$MinTemp, na.rm = T)
dat[dat<isotherm] <- NA
# Perform hycom integration
dat <- dat - isotherm
ohc <- cp * rho * apply(dat, 1:2, sum, na.rm = T) / 10000
# perform tag data integration
tag <- approx(pdt.i$Depth, pdt.i$MidTemp, xout = depth)
tag <- tag$y - isotherm
tag.ohc <- cp * rho * sum(tag, na.rm = T) / 10000
# store tag ohc
ohcVec[i] <- tag.ohc
sdx=10
lik <- dnorm(ohc, tag.ohc, sdx)
lik <- (lik / max(lik, na.rm = T)) - .05 # normalize
?normalize
?scale
lik <- dnorm(ohc, tag.ohc, sdx)
summary(scale(lik))
?normalise
summary(normalise(lik))
max(normalise(lik),na.rm=T)
normalise
sum(lik)
str(lik)
lik <- dnorm(ohc, tag.ohc, sdx)
lik <- (lik / max(lik, na.rm = T)) - .05 # normalize
likelihood <- as.array(lik)
likelihood <- abind(likelihood, lik, along = 3)
str(likelihood)
raster
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
list.pdt <- list(x = lon, y = lat, z = likelihood)
ex <- extent(list.pdt)
likelihood <- brick(list.pdt$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], transpose=T, crs)
likelihood <- flip(likelihood, direction = 'y')
likelihood
plot(likelihood[[2]])
plot(countriesLow, add=T)
lon
lat
list.pdt <- list(x = lon-360, y = lat, z = likelihood)
ex <- extent(list.pdt)
likelihood <- as.array(lik)
likelihood <- abind(likelihood, lik, along = 3)
likelihood <- brick(list.pdt$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], transpose=T, crs)
likelihood <- flip(likelihood, direction = 'y')
str(likelihood)
str(lon)
str(list.pdt)
likelihood <- as.array(lik)
likelihood <- abind(likelihood, lik, along = 3)
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
list.pdt <- list(x = lon-360, y = lat, z = likelihood)
ex <- extent(list.pdt)
likelihood <- brick(list.pdt$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], transpose=T, crs)
likelihood <- flip(likelihood, direction = 'y')
plot(likelihood[[2]])
plot(countriesLow,add=T)
pdt.i
print(class(L))
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
tag
pop
pop
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
tag
pop
pop-tag
as.numeric(pop-tag)
as.Date(udates)
seq(tag,pop)
seq(tag,pop,by=1)
seq(tag,pop,length.out = as.numeric(pop-tag))
seq(tag,pop,by='day')
dim(lik)
?array
L.ohc <- array(0, dim = c(dim(lik), length(dateVec)))
dateVec <- seq(tag, pop, by = 'day')
L.ohc <- array(0, dim = c(dim(lik), length(dateVec)))
str(L.ohc)
time
which(dateVec == as.Date(time))
as.Date(time)
dateVec
as.Date(time) %in% dateVec
as.Date(dateVec)
dateVec <- as.Date(seq(tag, pop, by = 'day'))
which(dateVec == as.Date(time))
locs
locs$Date[2]
as.Date(locs$Date[2])
locDates <- as.Date(locs$Date, format = findDateFormat(locs$Date))
head(locDates)
dateVec
t=2
which(dateVec == locDates[t]
)
locDates[t]
str(locs)
locs <- read.table(paste(ptt, '-Locations.csv', sep=''), sep=',', header = T, blank.lines.skip = F)
dts <- format(as.POSIXct(locs$Date, format = findDateFormat(locs$Date)), '%Y-%m-%d')
didx <- dts > tag & dts < pop
locs <- locs[didx,]
which(dateVec == locDates[t]
)
dateVec
locDates <- as.Date(locs$Date, format = findDateFormat(locs$Date))
which(dateVec == locDates[t])
locDatespt
locDates[t]
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
locs <- locs[didx,]
ngrid <- c(limits[2] - limits[1], limits[4] - limits[3])
g <- setup.grid(locs)
lon <- g$lon[1,]
lat <- g$lat[,1]
# tag and pop locations
#iniloc = data.frame(matrix(c(-41.38018333,30.39173333,-52.24500,36.688),
#                           nrow=2,ncol=2,byrow=T))
colnames(iniloc) = list('day','month','year','lat','lon')
locs
tag
pop
locs <- read.table(paste(ptt, '-Locations.csv', sep=''), sep=',', header = T, blank.lines.skip = F)
#light <- light[light$Type == 'GPE',]
dts <- format(as.POSIXct(locs$Date, format = findDateFormat(locs$Date)), '%Y-%m-%d')
didx <- dts > tag & dts < pop
locs <- locs[didx,]
locs
ngrid <- c(limits[2] - limits[1], limits[4] - limits[3])
g <- setup.grid(locs)
lon <- g$lon[1,]
lat <- g$lat[,1]
colnames(iniloc) = list('day','month','year','lat','lon')
L.locs <- calc.locs(locs, iniloc, g, raster = T, dateVec = dateVec)
L.locs
plot(L.locs[[2]])
plot(countriesLow,add=TRUE)
plot(L.locs[[10]])
plot(countriesLow, add = T)
