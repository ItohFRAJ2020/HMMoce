} else if(nasstidx[b] & naohcidx[b]){
} else if(nalocidx[b] & naohcidx[b]){
}
# DEFINE A PROJECTION
# MAKE A LIST OF LIKELIHOOD
ex <- raster::extent(list.pdt)
T <- dim(Lmat)[3]
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
}
# where naLidx==0, both likelihoods are zero
Lmat[,,idx1] = L.locs[,,idx1] + L.sst[,,idx1] + L.ohc[,,idx1] # when only 1 has data
for(b in which(idx2)){
Lmat[,,b] = L.sst[,,b] * L.ohc[,,b]
Lmat[,,b] = L.locs[,,b] * L.ohc[,,b]
}
L.mle <- raster::resample(L, L.mle.res)
list.pdt <- list(x = lon, y = lat, z = Lmat)
for(i in 1:T){
# MAKE AN ARRAY OF ZEROS
idx2 = naLidx == 2
Lmat[,,b] = L.sst[,,b] * L.locs[,,b]
if(i==1) L <- L.i else L <- stack(L, L.i)
Lmat[,,idx3] = L.locs[,,idx3] * L.sst[,,idx3] * L.ohc[,,idx3] # when all have data
# MAKE A RASTER OUT OF IT
#       naLidx==2, both have data
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
Lmat = L.pdt * 0
# where naLidx==0, both likelihoods are zero
#       naLidx==1, one has data
#       naLidx==2, both have data
idx1 = naLidx == 1
idx2 = naLidx == 2
idx3 = naLidx == 3
Lmat[,,idx1] = L.locs[,,idx1] + L.sst[,,idx1] + L.ohc[,,idx1] # when only 1 has data
#Lmat[,,idx2] = L.sst[,,idx2] * L.locs[,,idx2] # when both have data
Lmat[,,idx3] = L.locs[,,idx3] * L.sst[,,idx3] * L.ohc[,,idx3] # when all have data
# USE THE INDICES TO POPULATE L
for(b in which(idx2)){
if(nasstidx[b] & nalocidx[b]){
Lmat[,,b] = L.sst[,,b] * L.locs[,,b]
} else if(nasstidx[b] & naohcidx[b]){
Lmat[,,b] = L.sst[,,b] * L.ohc[,,b]
} else if(nalocidx[b] & naohcidx[b]){
Lmat[,,b] = L.locs[,,b] * L.ohc[,,b]
}
}
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
# MAKE A LIST OF LIKELIHOOD
list.pdt <- list(x = lon, y = lat, z = Lmat)
ex <- raster::extent(list.pdt)
# MAKE A RASTER OUT OF IT
T <- dim(Lmat)[3]
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
L.mle <- raster::resample(L, L.mle.res)
L.mle
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L.mle, direction = 'y')), c(3, 2, 1))
lat <- g$lat[,1]
head(lat)
lon <- g$lon[1,]; lat <- g$lat[,1]
head(lon)
image.plot(lon,lat,L[1,,])
base::save.image('blue259_example_30Apr.RData')
L[L == 0] = 1e-15
L[is.na(L)] = 1e-15
L.mle[L.mle == 0] = 1e-15
L.mle[is.na(L.mle)] = 1e-15
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
D1 <- par0[1:2] # parameters for kernel 1. this is behavior mode transit
D2 <- par0[3:4] # parameters for kernel 2. resident behavior mode
p <- par0[5:6]
#----------------------------------------------------------------------------------#
# GENERATE MOVEMENT KERNELS. D VALUES ARE MEAN AND SD PIXELS
K1 = as.cimg(gausskern(D1[1], D1[2], muadv = 0))
K2 = as.cimg(gausskern(D2[1], D2[2], muadv = 0))
P <- matrix(c(p[1],1-p[1],1-p[2],p[2]),2,2,byrow=TRUE)
f = hmm.filter(g,L,K1,K2,P)
res = apply(f$phi[1,,,],2:3,sum, na.rm=T)
fields::image.plot(lon, lat, res/max(res), zlim = c(.05,1))
s = hmm.smoother(f, K1, K2, P, plot = F)
sres = apply(s[1,,,], 2:3, sum, na.rm=T)
fields::image.plot(lon, lat, sres/max(sres), zlim = c(.05,1))
title('CI')
distr = s
meanlat <- apply(apply(distr, c(2, 4), sum) * repmat(t(as.matrix(g$lat[,1])), T, 1), 1, sum)
meanlon <- apply(apply(distr, c(2, 3), sum) * repmat(t(as.matrix(g$lon[1,])), T, 1), 1, sum)
locs_sst_ohc_par1 <- cbind(dates = dateVec, lon = meanlon, lat = meanlat)
str(spot)
plot(meanlon, meanlat, col=2,type='l')
plot(countriesLow, add = T)
lines(spot$Longitude, spot$Latitude)
plot(meanlon, meanlat, col=2,type='l', xlim=c(-80,-35),ylim=c(20,46))
plot(countriesLow, add = T)
lines(spot$lon, spot$lat)
gpe <- read.table('~/Documents/WHOI/Data/Blues/2015/141259/141259-4-GPE3.csv',sep=',',header=T)
gpe <- read.table('~/Documents/WHOI/Data/Blues/2015/141259/141259-4-GPE3.csv',
sep=',',header=T, skip = 5)
str(gpe)
lines(gpe$Most.Likely.Longitude, gpe$Most.Likely.Latitude, col='blue')
lines(meanlon, meanlat, col=2)
gpe <- read.table('~/Documents/WHOI/Data/Blues/2015/141259/141259-5-GPE3.csv',
sep=',',header=T, skip = 5)
lines(gpe$Most.Likely.Longitude, gpe$Most.Likely.Latitude, col='green')
gpe <- read.table('~/Documents/WHOI/Data/Blues/2015/141259/141259-6-GPE3.csv',
sep=',',header=T, skip = 5)
lines(gpe$Most.Likely.Longitude, gpe$Most.Likely.Latitude, col='orange')
str(g.mle)
str(L.res)
g.mle <- L.res$g.mle
str(g.mle)
str(L.mle)
t <- Sys.time()
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
fit <- nlm(get.nll.fun, par0, g.mle, L.mle)
Sys.time() - t
plot(L.rasters$L.ohc[[4]])
udates <- unique(as.Date(pdt$Date))
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/', ptt, '/',sep = '')
head(dateVec)
tail(dateVec)
dateVec[!which(dateVec %in% udates)]
dateVec[-which(dateVec %in% udates)]
head(udates)
udates.new <- dateVec[-which(dateVec %in% udates)]
sp.lim
for(i in 1:length(udates.new)){
time <- as.Date(udates.new[i])
repeat{
get.hycom(sp.lim, time, type='a', filename = paste(ptt, '_', time, '.nc', sep = ''),
download.file = TRUE, dir = ohc.dir, vars = 'water_temp')
tryCatch({
err <- try(ncdf::open.ncdf(paste(ohc.dir,ptt,'_',time,'.nc',sep='')),silent=T)
}, error=function(e){print(paste('ERROR: Download of data at ',time,' failed. Trying call to server again.',sep=''))})
if(class(err) != 'try-error') break
}
}
base::save.image('blue259_example_30Apr.RData')
devtools::load_all(".")
devtools::build()
expts = data.frame(
start=c(as.Date('2008-09-19'), as.Date('2009-05-07'),
as.Date('2012-05-01'), as.Date('2013-08-21'),
as.Date('2014-04-04'), as.Date('2016-04-18')),
end=c(as.Date('2009-05-06'), as.Date('2011-01-02'),
as.Date('2013-08-20'), as.Date('2014-04-03'),
as.Date('2016-04-17'), Sys.Date() + 1),
url=c('http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_90.6?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_90.8?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_90.9?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_91.0?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_91.1?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_91.2?'))
expts
expts = data.frame(
start=c(as.Date('1992-10-02'), as.Date('1995-08-01'),
as.Date('2012-01-01'), as.Date('2013-08-21'),
as.Date('2014-04-05'), as.Date('2016-04-18')),
end=c(as.Date('1995-07-31'), as.Date('2012-12-31'),
as.Date('2013-08-20'), as.Date('2014-04-04'),
as.Date('2016-04-17'), Sys.Date() + 1),
url=c('http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_19.0?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_19.1?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_90.9?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_91.0?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_91.1?',
'http://ncss.hycom.org/thredds/ncss/GLBu0.08/expt_91.2?'))
expts
dts <- as.Date(dts, format = '%d-%b-%Y')
dts <- c('25-Nov-2010','20-Jul-2011','15-Sep-2011',
'13-Apr-2012','27-Sep-2013','26-Mar-2014')
dts <- as.Date(dts, format = '%d-%b-%Y')
udates <- c(seq(dts[1], dts[2], by = 'day'),
seq(dts[3], dts[4], by = 'day'),
seq(dts[5], dts[6], by = 'day'))
locs <- read.table('~/Documents/WHOI/RData/Swords/sword bounds.csv',sep=',',header=T)
str(locs)
plot(locs$TagLong, locs$TagLat, pch=16, col='green')
points(locs$PopLong, locs$PopLat, pch=16, col='red')
summary(locs)
locs
locs[14,5]
locs[14,5] = locs[14,5] * -1
summary(locs)
plot(locs$TagLong, locs$TagLat, pch=16, col='green', ylim = c(10,50), xlim = c(-80,-25))
plot(locs$PopLong, locs$PopLat, pch=16, col='red')
data(countriesLow)
library(rworldmap)
data(countriesLow)
plot(locs$TagLong, locs$TagLat, pch=16, col='green', ylim = c(10,50), xlim = c(-80,-25))
points(locs$PopLong, locs$PopLat, pch=16, col='red')
plot(countriesLow, add=T)
plot(locs$TagLong, locs$TagLat, pch=16, col='green', ylim = c(0,60), xlim = c(-80,-25))
points(locs$PopLong, locs$PopLat, pch=16, col='red')
plot(countriesLow, add=T)
plot(locs$TagLong, locs$TagLat, pch=16, col='green', ylim = c(0,60), xlim = c(-85,-20))
points(locs$PopLong, locs$PopLat, pch=16, col='red')
plot(countriesLow, add=T)
sp.lim <- list(lonmin = -85, lonmax = -20, latmin = 0, latmax = 60)
length(udates)
sp.lim <- list(lonmin = -85, lonmax = -20, latmin = 0, latmax = 60)
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/Swords/',sep = '')
i=1
udates[1]
time <- as.Date(udates[i])
time
get.hycom(sp.lim, time, type='a', filename = paste(ptt, '_', time, '.nc', sep = ''),
download.file = TRUE, dir = ohc.dir, vars = 'water_temp')
get.hycom(sp.lim, time, type='a', filename = paste('Swords_', time, '.nc', sep = ''),
download.file = TRUE, dir = ohc.dir, vars = 'water_temp')
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
get.hycom(sp.lim, time, type='a', filename = paste('Swords_', time, '.nc', sep = ''),
download.file = TRUE, dir = ohc.dir, vars = 'water_temp')
49*631
woa.dir = '/Users/Cam/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/woa13_25deg_global_meantemp.nc'
nc = ncdf::open.ncdf(woa.dir)
lon = ncdf::get.var.ncdf(nc, 'Longitude')
lat = ncdf::get.var.ncdf(nc, 'Latitude')
depth = ncdf::get.var.ncdf(nc, 'Depth')
sp.lim <- list(lonmin = min(lon), lonmax = max(lon), latmin = min(lat), latmax = max(lat))
sp.lim
return.woa = extract.woa(woa.dir, sp.lim, resolution = 'quarter')
#' Extract temperatures from World Ocean Atlas
#'
#' \code{extract.woa} extracts the desired temperature data from a global
#' dataset derived from monthly gridded climatology data contained in the 2013
#' World Ocean Atlas
#'
#' @param nc.dir directory to load the global nc file from; specify the complete
#'   path to the nc file unless it is in your current working directory
#' @param bbox bounding box of form list(long min, long max, lat min, lat max)
#' @param resolution indicates whether oceanographic data is gridded at
#'   'quarter' or 'one' degree resolution
#'
#' @return a list containing: DAT is an array of temperature data with
#'   dimensions (long, lat, depth, time) depth contains 57 standard depth levels
#'   by default and levels are defined in variable 'depth' contained here. time
#'   is monthly and spans the entire year. LON/LAT are vectors of lon/lat bounds
#' @export
#'
#' @examples
#' none
extract.woa <- function(nc.dir, bbox, resolution){
# load global nc
nc = ncdf::open.ncdf(nc.dir)
# retrieve var bounds from global nc
lon = ncdf::get.var.ncdf(nc, 'Longitude')
lat = ncdf::get.var.ncdf(nc, 'Latitude')
depth = ncdf::get.var.ncdf(nc, 'Depth')
# set bounds for extracting data
xmin = which.min((bbox[[1]] - lon) ^ 2)
xmax = which.min((bbox[[2]] - lon) ^ 2)
ymin = which.min((bbox[[3]] - lat) ^ 2)
ymax = which.min((bbox[[4]] - lat) ^ 2)
if(resolution == 'quarter'){
xlen = floor(4 * (bbox[[2]] - bbox[[1]])) # for quarter degree
ylen = floor(4 * (bbox[[4]] - bbox[[3]]))
} else if(resolution == 'one'){
xlen = bbox[[2]] - bbox[[1]] # for one degree
ylen = bbox[[4]] - bbox[[3]]
} else{
stop('Resolution of input oceanographic data not defined.')
}
dat = ncdf::get.var.ncdf(nc, start = c(xmin, ymin, 1, 1), count = c(xlen + 1, ylen + 1, 57, 12))
returnWOA = list(dat = dat, lon = lon[xmin:xmax], lat = lat[ymin:ymax], depth = depth)
}
return.woa = extract.woa(woa.dir, sp.lim, resolution = 'quarter')
fields::image.plot(return.woa$lon, return.woa$lat, return.woa$dat)
str(return.woa)
fields::image.plot(lon,lat,return.woa$dat[,,1,1])
str(as.vector(return.woa$depth))
woa13 <- list(lon, lat, as.vector(return.woa$depth), return.woa$dat)
str(woa13)
woa13 <- list(lon = as.vector(lon), lat = as.vector(lat), depth = as.vector(return.woa$depth), temp = return.woa$dat)
str(woa13)
rm(depth)
rm(lat)
rm(lon)
rm(nc)
rm(return.woa)
rm(sp.lim)
rm(woa.dir)
rm(extract.woa)
?save
base::save('woa13.RData', compress=TRUE)
base::save(woa13, 'woa13.RData', compress=TRUE)
base::save(woa13, file='woa13.RData', compress=TRUE)
base::save('woa13_bz.RData', compress='bzip2')
base::save(woa13, file='woa13_bz.RData', compress='bzip2')
base::save(woa13, file='woa13_xz.RData', compress='xz')
sum(c(2,2))
devtools::load_all(".")
setwd('~/Documents/WHOI/Data/Blues/2015/141259/')
#----------------------------------------------------------------------------------#
# ADD MAP DATA
library(rworldmap)
data("countriesLow")
load('blue259_example.RData')
load('~/Documents/WHOI/RData/Blues/2015/141259/blue259_example_30Apr.RData')
Sys.time() #started 1341
naLidx = nalocidx + nasstidx# + naohcidx
# MAKE AN ARRAY OF ZEROS
Lmat = L.pdt * 0
# where naLidx==0, both likelihoods are zero
#       naLidx==1, one has data
#       naLidx==2, both have data
idx1 = naLidx == 1
idx2 = naLidx == 2
Lmat[,,idx1] = L.locs[,,idx1] + L.sst[,,idx1]# + L.ohc[,,idx1] # when only 1 has data
#Lmat[,,idx2] = L.sst[,,idx2] * L.locs[,,idx2] # when both have data
Lmat[,,idx3] = L.locs[,,idx3] * L.sst[,,idx3]# * L.ohc[,,idx3] # when all have data
Lmat[,,idx2] = L.sst[,,idx2] * L.locs[,,idx2] # when both have data
rm(idx3)
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
# MAKE A LIST OF LIKELIHOOD
list.pdt <- list(x = lon, y = lat, z = Lmat)
ex <- raster::extent(list.pdt)
# MAKE A RASTER OUT OF IT
T <- dim(Lmat)[3]
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
L.mle <- raster::resample(L, L.mle.res)
# MAKE BOTH RASTERS (COARSE AND FINE RES L's) INTO AN ARRAY
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L.mle, direction = 'y')), c(3, 2, 1))
L[L == 0] = 1e-15
L[is.na(L)] = 1e-15
L.mle[L.mle == 0] = 1e-15
L.mle[is.na(L.mle)] = 1e-15
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
locs_sst_ohc_par1 <- cbind(dates = dateVec, lon = meanlon, lat = meanlat)
D1 <- par0[1:2] # parameters for kernel 1. this is behavior mode transit
D2 <- par0[3:4] # parameters for kernel 2. resident behavior mode
p <- par0[5:6]
#----------------------------------------------------------------------------------#
# GENERATE MOVEMENT KERNELS. D VALUES ARE MEAN AND SD PIXELS
K1 = as.cimg(gausskern(D1[1], D1[2], muadv = 0))
K2 = as.cimg(gausskern(D2[1], D2[2], muadv = 0))
P <- matrix(c(p[1],1-p[1],1-p[2],p[2]),2,2,byrow=TRUE)
#----------------------------------------------------------------------------------#
# RUN THE FILTER STEP
f = hmm.filter(g,L,K1,K2,P)
res = apply(f$phi[1,,,],2:3,sum, na.rm=T)
fields::image.plot(lon, lat, res/max(res), zlim = c(.05,1))
#----------------------------------------------------------------------------------#
# RUN THE SMOOTHING STEP
s = hmm.smoother(f, K1, K2, P, plot = F)
# PLOT IT IF YOU WANT TO SEE LIMITS (CI)
sres = apply(s[1,,,], 2:3, sum, na.rm=T)
fields::image.plot(lon, lat, sres/max(sres), zlim = c(.05,1))
#----------------------------------------------------------------------------------#
# GET THE MOST PROBABLE TRACK
#----------------------------------------------------------------------------------#
distr = s
meanlat <- apply(apply(distr, c(2, 4), sum) * repmat(t(as.matrix(g$lat[,1])), T, 1), 1, sum)
meanlon <- apply(apply(distr, c(2, 3), sum) * repmat(t(as.matrix(g$lon[1,])), T, 1), 1, sum)
locs_sst_par1 <- cbind(dates = dateVec, lon = meanlon, lat = meanlat)
str(locs_sst_par1)
str(locs_sst_ohc_par1)
head(locs_sst_ohc_par1)
head(locs_sst_par1)
lines(locs_sst_par1$lon, locs_sst_par1$lat)
head(dateVec)
locs_sst_par1 <- data.frame(cbind(dates = dateVec, lon = meanlon, lat = meanlat))
str(locs_sst_par1)
locs_sst_par1 <- data.frame(cbind(dates = as.Date(dateVec), lon = meanlon, lat = meanlat))
str(locs_sst_par1)
locs_sst_par1 <- data.frame(dates = as.Date(dateVec), lon = meanlon, lat = meanlat)
str(locs_sst_par1)
lines(locs_sst_par1$lon, locs_sst_par1$lat)
naLidx = naohcidx + nasstidx# + naohcidx
# MAKE AN ARRAY OF ZEROS
Lmat = L.pdt * 0
# where naLidx==0, both likelihoods are zero
#       naLidx==1, one has data
#       naLidx==2, both have data
idx1 = naLidx == 1
idx2 = naLidx == 2
Lmat[,,idx1] = L.ohc[,,idx1] + L.sst[,,idx1]# + L.ohc[,,idx1] # when only 1 has data
Lmat[,,idx2] = L.sst[,,idx2] * L.ohc[,,idx2] # when both have data
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
# MAKE A LIST OF LIKELIHOOD
list.pdt <- list(x = lon, y = lat, z = Lmat)
ex <- raster::extent(list.pdt)
# MAKE A RASTER OUT OF IT
T <- dim(Lmat)[3]
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
# CREATE A MORE COARSE RASTER FOR PARAMETER ESTIMATION LATER
L.mle <- raster::resample(L, L.mle.res)
# MAKE BOTH RASTERS (COARSE AND FINE RES L's) INTO AN ARRAY
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L.mle, direction = 'y')), c(3, 2, 1))
# CHECK THAT IT WORKED OK
# lon <- g$lon[1,]
# lat <- g$lat[,1]
# fields::image.plot(lon, rev(lat), L[1,,])
# par(mfrow=c(2,1))
# fields::image.plot(lon, lat, L2[1,,])
# image.plot(L1[1,,])
# plot(countriesLow,add=T)
L[L == 0] = 1e-15
L[is.na(L)] = 1e-15
L.mle[L.mle == 0] = 1e-15
L.mle[is.na(L.mle)] = 1e-15
D1 <- par0[1:2] # parameters for kernel 1. this is behavior mode transit
D2 <- par0[3:4] # parameters for kernel 2. resident behavior mode
p <- par0[5:6]
#----------------------------------------------------------------------------------#
# GENERATE MOVEMENT KERNELS. D VALUES ARE MEAN AND SD PIXELS
K1 = as.cimg(gausskern(D1[1], D1[2], muadv = 0))
K2 = as.cimg(gausskern(D2[1], D2[2], muadv = 0))
P <- matrix(c(p[1],1-p[1],1-p[2],p[2]),2,2,byrow=TRUE)
#----------------------------------------------------------------------------------#
# RUN THE FILTER STEP
f = hmm.filter(g,L,K1,K2,P)
res = apply(f$phi[1,,,],2:3,sum, na.rm=T)
#fields::image.plot(lon, lat, res/max(res), zlim = c(.05,1))
#----------------------------------------------------------------------------------#
# RUN THE SMOOTHING STEP
s = hmm.smoother(f, K1, K2, P, plot = F)
# PLOT IT IF YOU WANT TO SEE LIMITS (CI)
sres = apply(s[1,,,], 2:3, sum, na.rm=T)
#fields::image.plot(lon, lat, sres/max(sres), zlim = c(.05,1))
#----------------------------------------------------------------------------------#
# GET THE MOST PROBABLE TRACK
#----------------------------------------------------------------------------------#
distr = s
meanlat <- apply(apply(distr, c(2, 4), sum) * repmat(t(as.matrix(g$lat[,1])), T, 1), 1, sum)
meanlon <- apply(apply(distr, c(2, 3), sum) * repmat(t(as.matrix(g$lon[1,])), T, 1), 1, sum)
ohc_sst_par1 <- data.frame(dates = as.Date(dateVec), lon = meanlon, lat = meanlat)
lines(ohc_sst_par1$lon, ohc_sst_par1$lat, col='red')
fields::image.plot(lon, lat, res/max(res), zlim = c(.05,1))
str(L)
library(fields)
str(lon)
str(lat)
image.plot(lon,lat,L[1,,])
str(L)
image.plot(lon,lat,L[2,,])
devtools::load_all(".")
setwd('~/Documents/WHOI/Data/Swords/2013/106795/')
library(rworldmap)
data("countriesLow")
ptt <- 106795
iniloc <- data.frame(matrix(c(27, 9, 2013, 46.47683333, -45.5640,
2, 11, 2013, 30.92645, -39.6919), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
# READ IN PDT DATA FROM WC FILES
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 2)
str(pdt)
pdt <- extract.pdt(pdt)
str(pdt)
pdt[1:20,]
library(hmmwoa)
setwd('~/Documents/WHOI/Data/WhiteSharks/2013/121325/')
load("~/Documents/WHOI/RData/WhiteSharks/2013/121325/Lydia_hmm_28Apr_BG.RData")
plot(meanlon, meanlat)
plot(countriesLow, add = T)
data(countriesLow)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
data("countriesLow")
library(rworldmap)
data("countriesLow")
plot(countriesLow, add = T)
spot = read.csv('~/Documents/WHOI/Data/WhiteSharks/2013/121325/121325-SPOT.csv')
spot = read.csv('~/Documents/WHOI/RData/WhiteSharks/2013/121325/121325-SPOT.csv')
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
didx <- dts >= tag & dts <= pop
spot <- spot[didx,]
plot(meanlon, meanlat, col=2,type='l')
plot(countriesLow, add = T)
lines(spot$Longitude, spot$Latitude)
setwd('~/Documents/WHOI/RData/WhiteSharks/2013/121325/')
fit <- read.table(file='121325_fit3.csv', sep=',', header=T)
kfit <- read.table(file='121325_kfit2.csv', sep=',', header = T)
str(kfit)
lonlow = -82
lonhigh = -40
latlow = 20
lathigh = 45
str(spot)
map(col='black',xlim=c(lonlow,lonhigh),ylim=c(latlow,lathigh),fill=TRUE,boundary=TRUE)
library(maptools)
map(col='black',xlim=c(lonlow,lonhigh),ylim=c(latlow,lathigh),fill=TRUE,boundary=TRUE)
library(maps)
map(col='black',xlim=c(lonlow,lonhigh),ylim=c(latlow,lathigh),fill=TRUE,boundary=TRUE)
box()
lines(spot$Longitude, spot$Latitude,col='dodgerblue3',lwd=2)
lines(meanlon,meanlat,col='orange',lwd=1)
lines(kfit$long, kfit$lat, col='red',lwd=.5)
lines(fit$long, fit$lat, col='grey',lwd=.5)
axis(1)
axis(2)
lonhigh = -47
setwd('~/Documents/WHOI/Results/')
pdf('compare_map_12Sep.pdf', width = 10, height = 8)
map(col='black',xlim=c(lonlow,lonhigh),ylim=c(latlow,lathigh),fill=TRUE,boundary=TRUE)
lines(spot$Longitude, spot$Latitude,col='dodgerblue3',lwd=2)
lines(meanlon,meanlat,col='orange',lwd=1)
lines(kfit$long, kfit$lat, col='red',lwd=.5)
lines(fit$long, fit$lat, col='grey',lwd=.5)
box(lwd=1)
axis(1);axis(2,las=1)
dev.off()
