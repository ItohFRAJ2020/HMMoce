?hmm.filter2
?hmm.filter
L
plot(L[[30]])
plot(countriesLow,add=T)
L.mle
plot(L.mle[[30]])
L.mle <- L
?aggregate
L.agg <- aggregate(L.mle[[1]], 2)
L.agg
L.mle[[1]]
L.mle <- aggregate(L, 3)
L.mle
L.mle <- aperm(raster::as.array(raster::flip(L.mle, direction = 'y')), c(3, 2, 1))
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
fields::image.plot(lon, lat, L[31,,])
fields::image.plot(L.mle[31,,])
fields::image.plot(L[31,,])
L[L == 0] = 1e-15
L[is.na(L)] = 1e-15
L.mle[L.mle == 0] = 1e-15
L.mle[is.na(L.mle)] = 1e-15
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
## SOME PROBLEMS HERE...
# CREATE A MORE COARSE RASTER FOR PARAMETER ESTIMATION LATER
L.mle <- L
L.mle <- aggregate(L, 3)
L.mle
L.pdt
L.pdt.save
L.res
str(L.res)
L.res[[1]]$L.pdt
L.res[[1]]$L.ohc
res(L.res[[1]]$L.ohc)
res(L.rasters[[1]]$L.ohc)
str(L.rasters)
L.rasters
res(L.rasters)
res(L.rasters[[1]])
res(L.rasters[[1]])[1]
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
t <- Sys.time()
L.res <- resample.grid(L.rasters, L.ohc)
Sys.time() - t
t <- Sys.time()
L.res <- resample.grid(L.rasters, L.rasters$L.ohc)
Sys.time() - t
L.res <- L.rasters$L.ohc
i=1
r <- L.rasters[[i]]
t <- Sys.time()
r <- raster::resample(r, L.res)
r <- L.rasters[[i]]
resol <- res(L.rasters[[i]][1])
L.rasters
res
resol <- raster::res(L.rasters[[i]][1])
L.rasters[[1]]
resol <- raster::res(L.rasters[[i]])[1]
resol
resol <- c(resol, raster::res(L.rasters[[i]])[1])
resol
resol <- c(resol,.26)
resol
which(resol == max(resol))
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
t <- Sys.time()
L.res <- resample.grid(L.rasters, L.rasters$L.ohc)
Sys.time() - t
L.mle.res <- L.res$L.mle.res
g <- L.res$g
t <- Sys.time()
L.res <- resample.grid(L.rasters, L.rasters$L.ohc)
Sys.time() - t
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
t <- Sys.time()
L.res <- resample.grid(L.rasters, L.rasters$L.ohc)
Sys.time() - t
L.mle.res <- L.res$L.mle.res
g <- L.res$g
L.mle.res
L.res
str(L.res)
L.res[[1]]
L.res[[2]]
L.mle.res <- L.res[[2]]#L.res$L.mle.res
g <- L.res$g
L.mle.res
L.rasters
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L.rasters
t <- Sys.time()
L.res <- resample.grid(L.rasters, L.rasters$L.ohc)
# total of ~5 mins when resampling to ohc, faster when more coarse is desired
Sys.time() - t
L.mle.res <- L.res$L.mle.res
g <- L.res$g
L.mle.res
resol <- c(.25,.09,.25,.25)
resol
which(resol == max(resol))
which(resol == max(resol))[1]
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
t <- Sys.time()
L.res <- resample.grid(L.rasters, L.rasters$L.ohc)
# total of ~5 mins when resampling to ohc, faster when more coarse is desired
Sys.time() - t
L.mle.res <- L.res$L.mle.res
g <- L.res$g
L.locs = raster::as.array(L.res[[1]]$L.locs)
L.pdt = raster::as.array(L.res[[1]]$L.pdt)
L.sst = raster::as.array(L.res[[1]]$L.sst)
L.ohc = raster::as.array(L.res[[1]]$L.ohc)
L.locs[is.na(L.locs)] = 0 # turn NA to 0
L.pdt[is.na(L.pdt)] = 0
L.sst[is.na(L.sst)] = 0
L.ohc[is.na(L.ohc)] = 0
# are all cells in a given likelihood surface == 0?
napdtidx = apply(L.pdt, 3, sum, na.rm=T) != 0
naohcidx = apply(L.ohc, 3, sum, na.rm=T) != 0
# INDICATES WHICH L LAYERS, IF ANY, ARE ALL ZEROS FOR EACH DAY
naLidx = nalocidx + nasstidx + naohcidx
Lmat = L.pdt * 0
#       naLidx==1, one has data
idx1 = naLidx == 1
nalocidx = apply(L.locs, 3, sum, na.rm=T) != 0 # does sum of likelihood surface
nasstidx = apply(L.sst, 3, sum, na.rm=T) != 0
#Lmat[,,idx2] = L.sst[,,idx2] * L.locs[,,idx2] # when both have data
# HERE, WE CHOOSE WHICH L's TO USE
# MAKE AN ARRAY OF ZEROS
#       naLidx==2, both have data
idx3 = naLidx == 3
# WHERE BOTH ARE ZEROS. THESE WILL BE INTERPOLTED IN THE FILTER
idx2 = naLidx == 2
Lmat[,,idx3] = L.locs[,,idx3] * L.sst[,,idx3] * L.ohc[,,idx3] # when all have data
Lmat[,,idx1] = L.locs[,,idx1] + L.sst[,,idx1] + L.ohc[,,idx1] # when only 1 has data
# where naLidx==0, both likelihoods are zero
# USE THE INDICES TO POPULATE L
for(b in which(idx2)){
if(nasstidx[b] & nalocidx[b]){
Lmat[,,b] = L.sst[,,b] * L.locs[,,b]
} else if(nasstidx[b] & naohcidx[b]){
Lmat[,,b] = L.sst[,,b] * L.ohc[,,b]
} else if(nalocidx[b] & naohcidx[b]){
Lmat[,,b] = L.locs[,,b] * L.ohc[,,b]
}
}
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
# MAKE A LIST OF LIKELIHOOD
list.pdt <- list(x = lon, y = lat, z = Lmat)
ex <- raster::extent(list.pdt)
# MAKE A RASTER OUT OF IT
T <- dim(Lmat)[3]
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
L.mle.res
L
t <- Sys.time()
L.mle <- resample(L, L.mle.res)
Sys.time() - t
L.mle
plot(L.mle[[1]])
plot(L.mle[[2]])
plot(L.mle[[3]])
plot(L.mle[[4]])
plot(L.mle[[5]])
plot(L.mle[[6]])
plot(L.mle[[7]])
plot(L.mle[[8]])
plot(L.mle[[9]])
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L.mle, direction = 'y')), c(3, 2, 1))
L[L == 0] = 1e-15
L[is.na(L)] = 1e-15
L.mle[L.mle == 0] = 1e-15
L.mle[is.na(L.mle)] = 1e-15
setwd('~/Documents/WHOI/RCode/hmmwoa')
dim(L.mle)
dim(g$lon)
L.mle.res
g.coarse <- setup.grid.raster(L.mle.res)
str(g.coarse)
g.mle <- setup.grid.raster(L.mle.res)
rm(g.coarse)
t <- Sys.time()
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
fit <- nlm(get.nll.fun, par0, g.mle, L.mle)
Sys.time() - t
fit
D1 <- par0[1:2] # parameters for kernel 1. this is behavior mode transit
D2 <- par0[3:4] # parameters for kernel 2. resident behavior mode
p <- par0[5:6]
#----------------------------------------------------------------------------------#
# GENERATE MOVEMENT KERNELS. D VALUES ARE MEAN AND SD PIXELS
K1 = as.cimg(gausskern(D1[1], D1[2], muadv = 0))
K2 = as.cimg(gausskern(D2[1], D2[2], muadv = 0))
P <- matrix(c(p[1],1-p[1],1-p[2],p[2]),2,2,byrow=TRUE)
#----------------------------------------------------------------------------------#
# RUN THE FILTER STEP
f = hmm.filter(g,L,K1,K2,P)
res = apply(f$phi[1,,,],2:3,sum, na.rm=T)
fields::image.plot(lon, lat, res/max(res), zlim = c(.05,1))
#----------------------------------------------------------------------------------#
# RUN THE SMOOTHING STEP
s = hmm.smoother2(f, K1, K2, P, plot = F)
distr = s
meanlon <- apply(apply(distr,c(2,3),sum)*repmat(t(as.matrix(g$lon[1,])),T,1),1,sum)
meanlat <- apply(apply(distr,c(2,4),sum)*repmat(t(as.matrix(g$lat[,1])),T,1),1,sum)
spot = read.table('~/Documents/WHOI/RData/sharkSiteData/AllArgosData.csv')
str(spot)
spot = read.table('~/Documents/WHOI/RData/sharkSiteData/AllArgosData.csv', sep=',', header = T)
str(spot)
spot <- spot[which(spot$ptt == 141261),]
dts <- as.POSIXct(spot$date, format=findDateFormat(spot$date))
didx <- dts >= tag & dts <= pop
spot <- spot[didx,]
str(spot)
plot(meanlon, meanlat, col=2,type='l')
graphics.off
graphics.off()
plot(meanlon, meanlat, col=2,type='l')
plot(countriesLow, add = T)
lines(spot$Longitude, spot$Latitude)
meanlat
distr = s
meanlat <- apply(apply(distr,c(2,4),sum)*repmat(t(as.matrix(g$lat[,1])),T,1),1,sum)
meanlon <- apply(apply(distr,c(2,3),sum)*repmat(t(as.matrix(g$lon[1,])),T,1),1,sum)
meanlat
str(lon)
str(lat)
str(g)
g$lon[1,]
sres = apply(s[1,,,], 2:3, sum, na.rm=T)
image.plot(g$lon[1,], g$lat[,1], sres/max(sres), zlim = c(.05,1))
fields::image.plot(g$lon[1,], g$lat[,1], sres/max(sres), zlim = c(.05,1))
g$lat[,1]
str(g$lon[1,])
str(g$lat[,1])
str(sres)
str(s)
s = hmm.smoother(f, K1, K2, P, plot = F)
# PLOT IT IF YOU WANT TO SEE LIMITS (CI)
sres = apply(s[1,,,], 2:3, sum, na.rm=T)
fields::image.plot(g$lon[1,], g$lat[,1], sres/max(sres), zlim = c(.05,1))
image.plot(sres/max(sres),zlim=c(.05,1))
fields::image.plot(sres/max(sres),zlim=c(.05,1))
fields::image.plot(g$lon[1,], g$lat[,1], t(sres/max(sres)), zlim = c(.05,1))
fields::image.plot(t(sres/max(sres)),zlim=c(.05,1))
str(L)
str(sres)
str(g$lon[1,])
lon <- g$lon[1,]
lat <- g$lat[,1]
fields::image.plot(lon,lat,L[1,,])
fields::image.plot(lat,lon,L[1,,])
str(lat)
str(lon)
str(L)
fields::image.plot(L[1,,])
t(lat)
rev(lat)
fields::image.plot(lon,rev(lat),L[1,,])
T <- dim(Lmat)[3]
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
plot(L[[1]])
str(L.mle)
library(fields)
image.plot(L.mle[1,,])
image.plot(lon,rev(lat),L.mle[1,,])
str(L.mle)
L
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
fields::image.plot(lon, lat, L[31,,])
plot(countriesLow,add=T)
fields::image.plot(lon, rev(lat), L[1,,])
plot(countriesLow,add=T)
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
L1 <- aperm(raster::as.array(L), c(3, 2, 1))
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
par(mfrow=c(2,1))
fields::image.plot(L[1,,])
image.plot(L1[1,,])
L2 <- L
L <- L1
fields::image.plot(lon, lat, L[1,,])
fields::image.plot(L[1,,])
lat
str(g)
str(g$lat[1,])
str(g$lat[,1])
str(g1)
lat <- rev(g$lat[,1])
lat
fields::image.plot(lon, lat, L[1,,])
plot(countriesLow,add=T)
graphics.off()
fields::image.plot(lon, lat, L2[1,,])
# image.plot(L1[1,,])
plot(countriesLow,add=T)
base::save.image('blue259_example_30Apr.RData')
str(L.res)
grid.raster
grid.ras
grid.ras <- L.rasters$L.ohc
ex <- raster::extent(grid.ras)
ex
il <- floor(ex[1])
al <- ceiling(ex[2])
lx <- 0.1 * (al - il)
lonl <- il - lx
lonu <- al + lx
# Find latitude extents
ila <- floor(ex[3])
ala <- ceiling(ex[4])
ly <- 0.1 * (ala - ila)
latl <- ila - ly
latu <- ala + ly
latl
latu
lo <- raster::xFromCol(grid.ras)
la <- raster::yFromRow(grid.ras)
l
lo
la
la <- rev(raster::yFromRow(grid.ras))
la
devtools::load_all(".")
t <- Sys.time()
time()
time()
t <- Sys.time()
L.res <- resample.grid(L.rasters, L.rasters$L.ohc)
# total of ~5 mins when resampling to ohc, faster when more coarse is desired
Sys.time() - t
L.mle.res <- L.res$L.mle.res
g <- L.res$g
str(g)
L.locs = raster::as.array(L.res[[1]]$L.locs)
L.pdt = raster::as.array(L.res[[1]]$L.pdt)
L.sst = raster::as.array(L.res[[1]]$L.sst)
L.ohc = raster::as.array(L.res[[1]]$L.ohc)
L.locs[is.na(L.locs)] = 0 # turn NA to 0
L.pdt[is.na(L.pdt)] = 0
L.sst[is.na(L.sst)] = 0
L.ohc[is.na(L.ohc)] = 0
# are all cells in a given likelihood surface == 0?
nalocidx = apply(L.locs, 3, sum, na.rm=T) != 0 # does sum of likelihood surface
napdtidx = apply(L.pdt, 3, sum, na.rm=T) != 0
naohcidx = apply(L.ohc, 3, sum, na.rm=T) != 0
nasstidx = apply(L.sst, 3, sum, na.rm=T) != 0
naLidx = nalocidx + nasstidx + naohcidx
Lmat = L.pdt * 0
#       naLidx==1, one has data
idx1 = naLidx == 1
idx3 = naLidx == 3
#Lmat[,,idx2] = L.sst[,,idx2] * L.locs[,,idx2] # when both have data
# USE THE INDICES TO POPULATE L
if(nasstidx[b] & nalocidx[b]){
} else if(nasstidx[b] & naohcidx[b]){
} else if(nalocidx[b] & naohcidx[b]){
}
# DEFINE A PROJECTION
# MAKE A LIST OF LIKELIHOOD
ex <- raster::extent(list.pdt)
T <- dim(Lmat)[3]
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
}
# where naLidx==0, both likelihoods are zero
Lmat[,,idx1] = L.locs[,,idx1] + L.sst[,,idx1] + L.ohc[,,idx1] # when only 1 has data
for(b in which(idx2)){
Lmat[,,b] = L.sst[,,b] * L.ohc[,,b]
Lmat[,,b] = L.locs[,,b] * L.ohc[,,b]
}
L.mle <- raster::resample(L, L.mle.res)
list.pdt <- list(x = lon, y = lat, z = Lmat)
for(i in 1:T){
# MAKE AN ARRAY OF ZEROS
idx2 = naLidx == 2
Lmat[,,b] = L.sst[,,b] * L.locs[,,b]
if(i==1) L <- L.i else L <- stack(L, L.i)
Lmat[,,idx3] = L.locs[,,idx3] * L.sst[,,idx3] * L.ohc[,,idx3] # when all have data
# MAKE A RASTER OUT OF IT
#       naLidx==2, both have data
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
Lmat = L.pdt * 0
# where naLidx==0, both likelihoods are zero
#       naLidx==1, one has data
#       naLidx==2, both have data
idx1 = naLidx == 1
idx2 = naLidx == 2
idx3 = naLidx == 3
Lmat[,,idx1] = L.locs[,,idx1] + L.sst[,,idx1] + L.ohc[,,idx1] # when only 1 has data
#Lmat[,,idx2] = L.sst[,,idx2] * L.locs[,,idx2] # when both have data
Lmat[,,idx3] = L.locs[,,idx3] * L.sst[,,idx3] * L.ohc[,,idx3] # when all have data
# USE THE INDICES TO POPULATE L
for(b in which(idx2)){
if(nasstidx[b] & nalocidx[b]){
Lmat[,,b] = L.sst[,,b] * L.locs[,,b]
} else if(nasstidx[b] & naohcidx[b]){
Lmat[,,b] = L.sst[,,b] * L.ohc[,,b]
} else if(nalocidx[b] & naohcidx[b]){
Lmat[,,b] = L.locs[,,b] * L.ohc[,,b]
}
}
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
# MAKE A LIST OF LIKELIHOOD
list.pdt <- list(x = lon, y = lat, z = Lmat)
ex <- raster::extent(list.pdt)
# MAKE A RASTER OUT OF IT
T <- dim(Lmat)[3]
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
L.mle <- raster::resample(L, L.mle.res)
L.mle
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L.mle, direction = 'y')), c(3, 2, 1))
lat <- g$lat[,1]
head(lat)
lon <- g$lon[1,]; lat <- g$lat[,1]
head(lon)
image.plot(lon,lat,L[1,,])
base::save.image('blue259_example_30Apr.RData')
L[L == 0] = 1e-15
L[is.na(L)] = 1e-15
L.mle[L.mle == 0] = 1e-15
L.mle[is.na(L.mle)] = 1e-15
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
D1 <- par0[1:2] # parameters for kernel 1. this is behavior mode transit
D2 <- par0[3:4] # parameters for kernel 2. resident behavior mode
p <- par0[5:6]
#----------------------------------------------------------------------------------#
# GENERATE MOVEMENT KERNELS. D VALUES ARE MEAN AND SD PIXELS
K1 = as.cimg(gausskern(D1[1], D1[2], muadv = 0))
K2 = as.cimg(gausskern(D2[1], D2[2], muadv = 0))
P <- matrix(c(p[1],1-p[1],1-p[2],p[2]),2,2,byrow=TRUE)
f = hmm.filter(g,L,K1,K2,P)
res = apply(f$phi[1,,,],2:3,sum, na.rm=T)
fields::image.plot(lon, lat, res/max(res), zlim = c(.05,1))
s = hmm.smoother(f, K1, K2, P, plot = F)
sres = apply(s[1,,,], 2:3, sum, na.rm=T)
fields::image.plot(lon, lat, sres/max(sres), zlim = c(.05,1))
title('CI')
distr = s
meanlat <- apply(apply(distr, c(2, 4), sum) * repmat(t(as.matrix(g$lat[,1])), T, 1), 1, sum)
meanlon <- apply(apply(distr, c(2, 3), sum) * repmat(t(as.matrix(g$lon[1,])), T, 1), 1, sum)
locs_sst_ohc_par1 <- cbind(dates = dateVec, lon = meanlon, lat = meanlat)
str(spot)
plot(meanlon, meanlat, col=2,type='l')
plot(countriesLow, add = T)
lines(spot$Longitude, spot$Latitude)
plot(meanlon, meanlat, col=2,type='l', xlim=c(-80,-35),ylim=c(20,46))
plot(countriesLow, add = T)
lines(spot$lon, spot$lat)
gpe <- read.table('~/Documents/WHOI/Data/Blues/2015/141259/141259-4-GPE3.csv',sep=',',header=T)
gpe <- read.table('~/Documents/WHOI/Data/Blues/2015/141259/141259-4-GPE3.csv',
sep=',',header=T, skip = 5)
str(gpe)
lines(gpe$Most.Likely.Longitude, gpe$Most.Likely.Latitude, col='blue')
lines(meanlon, meanlat, col=2)
gpe <- read.table('~/Documents/WHOI/Data/Blues/2015/141259/141259-5-GPE3.csv',
sep=',',header=T, skip = 5)
lines(gpe$Most.Likely.Longitude, gpe$Most.Likely.Latitude, col='green')
gpe <- read.table('~/Documents/WHOI/Data/Blues/2015/141259/141259-6-GPE3.csv',
sep=',',header=T, skip = 5)
lines(gpe$Most.Likely.Longitude, gpe$Most.Likely.Latitude, col='orange')
str(g.mle)
str(L.res)
g.mle <- L.res$g.mle
str(g.mle)
str(L.mle)
t <- Sys.time()
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
fit <- nlm(get.nll.fun, par0, g.mle, L.mle)
Sys.time() - t
plot(L.rasters$L.ohc[[4]])
udates <- unique(as.Date(pdt$Date))
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/', ptt, '/',sep = '')
head(dateVec)
tail(dateVec)
dateVec[!which(dateVec %in% udates)]
dateVec[-which(dateVec %in% udates)]
head(udates)
udates.new <- dateVec[-which(dateVec %in% udates)]
sp.lim
for(i in 1:length(udates.new)){
time <- as.Date(udates.new[i])
repeat{
get.hycom(sp.lim, time, type='a', filename = paste(ptt, '_', time, '.nc', sep = ''),
download.file = TRUE, dir = ohc.dir, vars = 'water_temp')
tryCatch({
err <- try(ncdf::open.ncdf(paste(ohc.dir,ptt,'_',time,'.nc',sep='')),silent=T)
}, error=function(e){print(paste('ERROR: Download of data at ',time,' failed. Trying call to server again.',sep=''))})
if(class(err) != 'try-error') break
}
}
base::save.image('blue259_example_30Apr.RData')
