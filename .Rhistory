locs.grid1 <- setup.locs.grid(sp.lim)
t <- Sys.time()
L.locs.1 <- calc.locs(locs, iniloc, locs.grid1, dateVec = dateVec, errEll=T)
Sys.time() - t
locs.grid2 <- setup.locs.grid(locs)
t <- Sys.time()
L.locs.2 <- calc.locs(locs, iniloc, locs.grid2, dateVec = dateVec, errEll=T)
Sys.time() - t
str(locs)
iniloc
str(locs.grid1)
str(locs.grid)
str(locs.grid1)
locs.grid1$lon[1,]
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
locs.grid1 <- setup.locs.grid(sp.lim)
t <- Sys.time()
L.locs.1 <- calc.locs(locs, iniloc, locs.grid1, dateVec = dateVec, errEll=T)
Sys.time() - t
locs.grid2 <- setup.locs.grid(locs)
t <- Sys.time()
L.locs.2 <- calc.locs(locs, iniloc, locs.grid2, dateVec = dateVec, errEll=T)
Sys.time() - t
par(mfrow=c(1,2))
plot(L.locs.1[[4]])
title('sp.lim')
plot(L.locs.2[[4]])
title('locs lim')
par(mfrow=c(1,2))
plot(L.locs.1[[1]])
title('sp.lim')
plot(L.locs.2[[1]])
title('locs lim')
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
locs.grid <- setup.locs.grid(sp.lim)
t <- Sys.time()
L.locs <- calc.locs(locs, iniloc, locs.grid, dateVec = dateVec, errEll=T)
Sys.time() - t # around 20 seconds
tag.sst <- read.table(paste(ptt, '-SST.csv', sep=''), sep=',',header=T, blank.lines.skip=F)
dts <- as.POSIXct(tag.sst$Date, format = findDateFormat(tag.sst$Date))
didx <- dts >= (tag + d1) & dts <= (pop - d1)
tag.sst <- tag.sst[didx,]
dts <- as.POSIXct(tag.sst$Date, format = findDateFormat(tag.sst$Date))
udates <- unique(as.Date(dts))
sst.dir <- paste('~/Documents/WHOI/RData/SST/OI/', ptt, '/',sep = '')
?calc.sst
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L.sst <- calc.sst(tag.sst, sst.dir = sst.dir, dateVec = dateVec)
t <- Sys.time()
L.sst <- calc.sst(tag.sst, sst.dir = sst.dir, dateVec = dateVec)
Sys.time() - t
plot(L.sst[[1]])
plot(L.sst[[2]])
graphics.off()
plot(L.sst[[2]])
L.sst
L.locs
ohc.dir <- paste('~/Documents/WHOI/RData/HYCOM/', ptt, '/',sep = '')
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
t <- Sys.time()
L.ohc <- calc.ohc(pdt, ohc.dir = ohc.dir, dateVec=dateVec, isotherm='')
Sys.time() - t
str(locs.grid)
woa.dir = '/Users/Cam/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/woa13_25deg_global_meantemp.nc'
sp.lim[[1]]
sp.lim
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
return.woa = extract.woa(woa.dir, limits, resolution = 'quarter')
return.woa = extract.woa(woa.dir, sp.lim, resolution = 'quarter')
woa = return.woa$dat
lon = as.numeric(return.woa$lon);
lat = as.numeric(return.woa$lat);
depth = as.numeric(return.woa$depth)
woa = removePacific(woa, lat, lon)
fields::image.plot(lon,lat,dat[,,1,1])
fields::image.plot(lon,lat,woa[,,1,1])
L.pdt <- calc.pdt.int(pdt, dat = woa, lat = lat, lon = lon, depth = depth, dateVec = dateVec)
Sys.time()
# started at 1213
plot(L.pdt[[10]])
L.rasters <- list(L.sst, L.ohc, L.pdt, L.locs)
length(L.rasters)
i=1
r <- L.rasters[[i]]
r
str(L.rasters)
res <- L.sst
t <- Sys.time()
r <- raster::resample(r, res)
Sys.time - t
t
Sys.time() - t
for (i in length(L.rasters)){
r <- L.rasters[[i]]
t <- Sys.time()
r <- raster::resample(r, res)
print(Sys.time() - t)
L.rasters[[i]] <- r
}
L.rasters[[1]]
L.rasters[[2]]
L.rasters[[4]]
L.rasters <- list(L.sst, L.ohc, L.pdt, L.locs)
for (i in 1:length(L.rasters)){
r <- L.rasters[[i]]
t <- Sys.time()
r <- raster::resample(r, res)
print(Sys.time() - t)
L.rasters[[i]] <- r
}
L.rasters[[1]]
L.rasters[[2]]
L.rasters[[3]]
plot(L.rasters[[1]][[1]])
plot(L.rasters[[1]][[3]])
plot(L.rasters[[2]][[4]])
grid.raster <- L.rasters[[1]]
ex <- raster::extent(grid.raster)
res(grid.raster)
extent(grid.raster)
ex
x[1]
ex[1]
il <- floor(ex[1])
al <- ceiling(ex[2])
lx <- 0.1 * (al - il)
lonl <- il - lx
lonu <- al + lx
lonl
lonu
xres(grid.raster)
xres(grid.raster) * (lonu - lonl)
xFromCol(grid.raster)
xFromCol(grid.raster) - xFromCell(grid.raster)
xFromCell(grid.raster)
lo <- xFromCol(grid.raster)
la <- yFromCol(grid.raster)
g <- meshgrid(lo, la)
la <- yFromRow(grid.raster)
g <- meshgrid(lo, la)
dlo <- lo[2] - lo[1]
dlo
xres(grid.raster)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L.res <- resample.grid(list(L.sst, L.ohc, L.pdt, L.locs), L.sst)
str(L.res)
L.rasters <- list(L.sst = L.sst, L.ohc = L.ohc, L.locs = L.locs, L.sst = L.sst)
L.res <- resample.grid(L.rasters, L.sst)
str(L.res)
L.rasters <- list(L.pdt = L.pdt, L.ohc = L.ohc, L.locs = L.locs, L.sst = L.sst)
L.res <- resample.grid(L.rasters, L.sst)
L.locs = raster::as.array(L.res[[1]]$L.locs)
L.pdt = raster::as.array(L.res[[1]]$L.pdt)
L.sst = raster::as.array(L.res[[1]]$L.sst)
L.ohc = raster::as.array(L.res[[1]]$L.ohc)
image.plot(L.locs[,,1])
fields::image.plot(L.locs[,,1])
fields::image.plot(L.locs[,,10])
fields::image.plot(L.locs[,,4])
L.res1 <- resample.grid(L.rasters, L.ohc)
load('Lydia_hmm_28Apr.RData')
L.rasters <- list(L.pdt = L.pdt, L.ohc = L.ohc, L.locs = L.locs, L.sst = L.sst)
L.res1 <- resample.grid(L.rasters, L.ohc)
L.rasters <- list(L.pdt = L.pdt.save, L.ohc = L.ohc.save, L.locs = L.locs.save, L.sst = L.sst.save)
L.res1 <- resample.grid(L.rasters, L.ohc.save)
?resample
par(mfrow=c(1,2))
plot(L.res1[[1]]$L.locs[[4]])
plot(L.res1[[1]]$L.ohc[[4]])
L.res1[[1]]$L.ohc
L.ohc.save
rm(Lres1)
rm(L.res1)
?res
r <- raster(ncol=18, nrow=18)
r
xres(r)
res(r) <- 1/120
r
rasMLE <- raster::raster(L.res[[1]])
L.res
L.res <- resample.grid(L.rasters, L.ohc.save)
rasMLE <- raster::raster(L.res[[1]])
rasMLE
L.res[[1]]
rasMLE <- raster::raster(L.res[[1]][1])
rasMLE <- raster::raster(L.res[[1]][[1]])
rasMLE
res(rasMLE) <- 1/4
rasMLE
str(L.res)
L.locs = raster::as.array(L.res[[1]]$L.locs)
L.pdt = raster::as.array(L.res[[1]]$L.pdt)
L.sst = raster::as.array(L.res[[1]]$L.sst)
L.ohc = raster::as.array(L.res[[1]]$L.ohc)
L.locs[is.na(L.locs)] = 0 # turn NA to 0
L.pdt[is.na(L.pdt)] = 0
L.sst[is.na(L.sst)] = 0
L.ohc[is.na(L.ohc)] = 0
# are all cells in a given likelihood surface == 0?
nalocidx = apply(L.locs,3, sum, na.rm=T)!=0 # does sum of likelihood surface
napdtidx = apply(L.pdt,3, sum, na.rm=T)!=0
nasstidx = apply(L.sst,3, sum, na.rm=T)!=0
naohcidx = apply(L.ohc,3, sum, na.rm=T)!=0
naLidx = nalocidx + nasstidx + naohcidx
# MAKE AN ARRAY OF ZEROS
Lmat = L.pdt * 0
# where naLidx==0, both likelihoods are zero
#       naLidx==1, one has data
#       naLidx==2, both have data
idx1 = naLidx == 1
idx2 = naLidx == 2
idx3 = naLidx == 3
Lmat[,,idx1] = L.locs[,,idx1] + L.sst[,,idx1] + L.ohc[,,idx1] # when only 1 has data
#Lmat[,,idx2] = L.sst[,,idx2] * L.locs[,,idx2] # when both have data
Lmat[,,idx3] = L.locs[,,idx3] * L.sst[,,idx3] * L.ohc[,,idx3] # when all have data
# USE THE INDICES TO POPULATE L
for(b in which(idx2)){
if(nasstidx[b] & nalocidx[b]){
Lmat[,,b] = L.sst[,,b] * L.locs[,,b]
} else if(nasstidx[b] & naohcidx[b]){
Lmat[,,b] = L.sst[,,b] * L.ohc[,,b]
} else if(nalocidx[b] & naohcidx[b]){
Lmat[,,b] = L.locs[,,b] * L.ohc[,,b]
}
}
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
list.pdt <- list(x = lon, y = lat, z = Lmat)
ex <- raster::extent(list.pdt)
# MAKE A RASTER OUT OF IT
T <- dim(Lmat)[3]
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
L.i
rasMLE <- raster::raster(L.i)
res(rasMLE) <- 1/4
rasMLE
L
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3,2,1))
fields::image.plot(lon, lat, L[31,,])
data(countriesLow)
plot(countriesLow,add=T)
L[L == 0] = 1e-15
L[is.na(L)] = 1e-15
rasMLE[rasMLE == 0] = 1e-15
rasMLE[is.na(rasMLE)] = 1e-15
rasMLE
rasMLE <- raster::raster(L)
T <- dim(Lmat)[3]
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
# CREATE A MORE COARSE RASTER FOR PARAMETER ESTIMATION LATER
rasMLE <- raster::raster(L)
res(rasMLE) <- 1/4
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3,2,1))
rasMLE
rasMLE <- aperm(raster::as.array(raster::flip(rasMLE, direction = 'y'), c(3, 2, 1)))
str(rasMLE)
L
T <- dim(Lmat)[3]
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
L
L.mle <- L
res(L.mle) <- 1/4
L.mle
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L.mle, direction = 'y'), c(3, 2, 1)))
str(L.mle)
?res
L.mle <- L
L.mle
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
# CREATE A MORE COARSE RASTER FOR PARAMETER ESTIMATION LATER
L.mle <- L
L.mle
res(L.mle) <- 1/4
L.mle
L
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L.mle, direction = 'y'), c(3, 2, 1)))
str(L)
str(L.mle)
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
# CREATE A MORE COARSE RASTER FOR PARAMETER ESTIMATION LATER
L.mle <- L
res(L.mle) <- 1/4
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L, direction = 'y'), c(3, 2, 1)))
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
# CREATE A MORE COARSE RASTER FOR PARAMETER ESTIMATION LATER
L.mle <- L
L.mle
res(L.mle) <- 1/4
L.mle
# MAKE BOTH RASTERS (COARSE AND FINE RES L's) INTO AN ARRAY
L.arr <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L, direction = 'y'), c(3, 2, 1)))
str(L.arr)
str(L.mle)
for(i in 1:T){
L.i <- raster::raster(Lmat[,,i], xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], crs)
if(i==1) L <- L.i else L <- stack(L, L.i)
}
# CREATE A MORE COARSE RASTER FOR PARAMETER ESTIMATION LATER
L.mle <- L
res(L.mle) <- 1/4
# MAKE BOTH RASTERS (COARSE AND FINE RES L's) INTO AN ARRAY
L <- aperm(raster::as.array(raster::flip(L, direction = 'y')), c(3, 2, 1))
L.mle <- aperm(raster::as.array(raster::flip(L.mle, direction = 'y')), c(3, 2, 1))
str(L.mle)
L[L == 0] = 1e-15
L[is.na(L)] = 1e-15
L.mle[L.mle == 0] = 1e-15
L.mle[is.na(L.mle)] = 1e-15
g
str(g)
str(L.res)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
L.res <- resample.grid(L.rasters, L.ohc.save)
str(L.res)
g <- L.res$g
t <- Sys.time()
par0=c(8.908,10.27,3,1,0.707,0.866) # from Pedersen 2011
fit <- nlm(get.nll.fun, par0, g, L)
D1 <- par0[1:2] # parameters for kernel 1. this is behavior mode transit
D2 <- par0[3:4] # parameters for kernel 2. resident behavior mode
p <- par0[5:6]
#----------------------------------------------------------------------------------#
# GENERATE MOVEMENT KERNELS. D VALUES ARE MEAN AND SD PIXELS
K1 = as.cimg(gausskern(D1[1], D1[2], muadv = 0))
K2 = as.cimg(gausskern(D2[1], D2[2], muadv = 0))
P <- matrix(c(p[1],1-p[1],1-p[2],p[2]),2,2,byrow=TRUE)
#----------------------------------------------------------------------------------#
# RUN THE FILTER STEP
f = hmm.filter2(g,L,K1,K2,P)
res = apply(f$phi[1,,,],2:3,sum, na.rm=T)
fields::image.plot(lon, lat, res/max(res), zlim = c(.05,1))
#----------------------------------------------------------------------------------#
# RUN THE SMOOTHING STEP
s = hmm.smoother2(f, K1, K2, P, plot = F)
distr = s
meanlat <- apply(apply(distr,c(2,4),sum)*repmat(t(as.matrix(g$lat[,1])),T,1),1,sum)
meanlon <- apply(apply(distr,c(2,3),sum)*repmat(t(as.matrix(g$lon[1,])),T,1),1,sum)
graphics.off()
library(hmmwoa)
library(hmmwoa)
?hmm.filter
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
?hmm.filter
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
?hmm.filter
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
?hmm.filter
?hmm.smoother
library(hmmwoa)
library(hmmwoa)
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
library(hmmwoa)
devtools::load_all(".")
setwd('~/Documents/WHOI/Data/WhiteSharks/2013/121325/')
ptt <- 121325
# TAGGING LOCATION
iniloc <- data.frame(matrix(c(3, 3, 2013, 30.3917, -81.3802,
31, 8, 2013, 30.668, -79.972), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
# READ IN PDT DATA FROM WC FILES
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
pdt <- extract.pdt(pdt)
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
str(pdt)
#' Calculate SST-based likelihood
#'
#' \code{calc.sst} compares tag SST to remotely sensed SST and calculates
#' likelihoods
#'
#' @param tag.sst variable containing tag-collected SST data
#' @param sst.dir local directory where remote sensing SST downloads are stored
#' @param dateVec is vector of dates from tag to pop-up in 1 day increments.
#'
#' @return likelihood is raster brick of likelihood surfaces representing matches
#'   between tag-based sst and remotely sensed sst maps
#' @export
#' @seealso \code{\link{calc.pdt.int}}, \code{\link{calc.ohc}}
#' @examples
#' none
calc.sst <- function(tag.sst, sst.dir, dateVec){
dts <- as.POSIXct(tag.sst$Date, format = findDateFormat(tag.sst$Date))
tag.sst[,12] <- as.Date(dts)
by_dte <- dplyr::group_by(tag.sst, V12)  # group by unique DAILY time points
tag.sst <- data.frame(dplyr::summarise(by_dte, min(Temperature), max(Temperature)))
colnames(tag.sst) <- list('date', 'minT', 'maxT')
T <- length(tag.sst[,1])
for(i in 1:T){
time <- tag.sst$date[i]
sst.i <- c(tag.sst$minT[i] * .99, tag.sst$maxT[i] * 1.01) # sensor error
# open day's sst data
nc <- ncdf::open.ncdf(paste(sst.dir, ptt, '_', as.Date(time), '.nc', sep='')) #add lat lon in filename '.nc', sep=''))
dat <- ncdf::get.var.ncdf(nc, 'sst') # for OI SST
# calc sd of SST
# focal calc on mean temp and write to sd var
t = Sys.time()
r = raster::flip(raster::raster(t(dat)), 2)
sdx = raster::focal(r, w = matrix(1, nrow = 3, ncol = 3), fun = function(x) sd(x, na.rm = T))
sdx = t(raster::as.matrix(raster::flip(sdx, 2)))
print(paste('finishing sd for ', time,'. Section took ', Sys.time() - t))
# compare sst to that day's tag-based ohc
t = Sys.time()
lik.sst <- likint3(dat, sdx, sst.i[1], sst.i[2])
print(paste('finishing lik.sst for ', time,'. Section took ', Sys.time() - t))
if(i == 1){
lon <- ncdf::get.var.ncdf(nc, 'longitude')
lat <- ncdf::get.var.ncdf(nc, 'latitude')
# result will be array of likelihood surfaces
L.sst <- array(0, dim = c(dim(lik.sst), length(dateVec)))
}
idx <- which(dateVec == as.Date(time))
L.sst[,,idx] = lik.sst
}
crs <- "+proj=longlat +datum=WGS84 +ellps=WGS84"
list.sst <- list(x = lon, y = lat, z = L.sst)
ex <- raster::extent(list.sst)
L.sst <- raster::brick(list.sst$z, xmn=ex[1], xmx=ex[2], ymn=ex[3], ymx=ex[4], transpose=T, crs)
L.sst <- raster::flip(L.sst, direction = 'y')
# return sst likelihood surfaces
return(L.sst)
}
likint3
devtools::load_all("~/Documents/WHOI/RCode/hmmwoa")
library(hmmwoa)
?hmmwoa
?calc.sst
?get.hycom
get.hycom
?calc.sst
sp.lim
library(hmmwoa)
get.hycom
devtools::load_all(".")
get.hycom
?get.hycom
devtools::load_all(".")
setwd('~/Documents/WHOI/Data/Blues/2015/141259/')
#----------------------------------------------------------------------------------#
# ADD MAP DATA
library(rworldmap)
data("countriesLow")
#----------------------------------------------------------------------------------#
# READ IN TAG DATA
ptt <- 141259
# TAGGING LOCATION
iniloc <- data.frame(matrix(c(13, 10, 2015, 41.3, -69.27,
10, 4, 2016, 40.251, -36.061), nrow = 2, ncol = 5, byrow = T))
colnames(iniloc) = list('day','month','year','lat','lon')
# READ IN PDT DATA FROM WC FILES
pdt <- read.table(paste(ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
pdt <- extract.pdt(pdt)
tag <- as.POSIXct(paste(iniloc[1,1], '/', iniloc[1,2], '/', iniloc[1,3], sep=''), format = '%d/%m/%Y')
pop <- as.POSIXct(paste(iniloc[2,1], '/', iniloc[2,2], '/', iniloc[2,3], sep=''), format = '%d/%m/%Y')
dts <- as.POSIXct(pdt$Date, format = findDateFormat(pdt$Date))
d1 <- as.POSIXct('1900-01-02') - as.POSIXct('1900-01-01')
didx <- dts >= (tag + d1) & dts <= (pop - d1)
pdt <- pdt[didx,]
# VECTOR OF DATES FROM DATA. THIS IS USED IN MANY FUNCTIONS
udates <- unique(as.Date(pdt$Date))
dateVec <- as.Date(seq(tag, pop, by = 'day'))
#----------------------------------------------------------------------------------#
locs <- read.table(paste(ptt, '-Locations-GPE2.csv', sep=''), sep=',', header = T, blank.lines.skip = F)
dts <- format(as.POSIXct(locs$Date, format = findDateFormat(locs$Date)), '%Y-%m-%d')
didx <- dts > (tag + d1) & dts < (pop - d1)
locs <- locs[didx,]
if (exists('sp.lim')){
locs.grid <- setup.locs.grid(sp.lim)
} else{
locs.grid <- setup.locs.grid(locs)
sp.lim <- list(lonmin = min(locs.grid$lon[1,]), lonmax = max(locs.grid$lon[1,]),
latmin = min(locs.grid$lat[,1]), latmax = max(locs.grid$lat[,1]))
}
t <- Sys.time()
L.locs <- calc.locs(locs, iniloc, locs.grid, dateVec = dateVec, errEll=T)
Sys.time() - t # around 20 seconds
plot(L.locs[[4]])
str(locs.grid)
sp.lim
tag.sst <- read.table(paste(ptt, '-SST.csv', sep=''), sep=',',header=T, blank.lines.skip=F)
dts <- as.POSIXct(tag.sst$Date, format = findDateFormat(tag.sst$Date))
didx <- dts >= (tag + d1) & dts <= (pop - d1)
tag.sst <- tag.sst[didx,]
if (length(tag.sst[,1]) <= 1){
stop('Something wrong with reading and formatting of tags SST data. Check date format.')
}
dts <- as.POSIXct(tag.sst$Date, format = findDateFormat(tag.sst$Date))
udates <- unique(as.Date(dts))
sst.dir <- paste('~/Documents/WHOI/RData/SST/OI/', ptt, '/',sep = '')
base::save.image('blue259_example.RData')
