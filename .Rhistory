tids <- getTimeID(x)
time <- tids[, 1]
id <- factor(tids[, 2])
x <- coords[, 1]
y <- coords[, 2]
pprm <- 3
grps <- levels(id)
if (length(x) != length(y))
stop("x and y vectors must be of same\nlength")
if (length(x) != length(time))
stop("Length of times not equal to number of points")
okFULL <- rep(TRUE, nrow(coords))
if (test)
res <- list(speed = numeric(0), rms = numeric(0))
ind <- id == sub
xy <- matrix(c(x[ind], y[ind]), ncol = 2)
tms <- time[ind]
npts <- nrow(xy)
RMS <- rep(max.speed + 1, npts)
offset <- pprm - 1
ok <- rep(TRUE, npts)
index <- 1:npts
iter <- 1
n <- length(which(ok))
n
x1 <- xy[ok, ]
speed1 <- trackDistance(x1[-nrow(x1), 1], x1[-nrow(x1),
2], x1[-1, 1], x1[-1, 2], longlat = !projected)/(diff(unclass(tms[ok]))/3600)
speed2 <- trackDistance(x1[-((nrow(x1) - 1):nrow(x1)),
1], x1[-((nrow(x1) - 1):nrow(x1)), 2], x1[-(1:2),
1], x1[-(1:2), 2], longlat = !projected)/((unclass(tms[ok][-c(1,
2)]) - unclass(tms[ok][-c(n - 1, n)]))/3600)
str(speed1)
str(speed2)
thisIndex <- index[ok]
npts <- length(speed1)
npts < pprm
pprm
?next
sub1 <- rep(1:2, npts - offset) + rep(1:(npts - offset),
each = 2)
sub2 <- rep(c(0, 2), npts - offset) + rep(1:(npts -
offset), each = 2)
summary(speed1)
?trackDistance
!projected
(diff(unclass(tms[ok]))/3600)
head(tms)
head(diff(unclass(tms[ok]))/3600)
tms[2]-tms[1]
20*1000/3600
head(speed1)
head(trackDistance(x1[-nrow(x1), 1], x1[-nrow(x1),
2], x1[-1, 1], x1[-1, 2], longlat = !projected))
63.6/92
.69*1000/3600
str(speed1)
str(tr)
plot(speed1,type='l')
length(which(speed1<=7.2))
length(which(speed2<=7.2))
plot(speed1[which(speed1<=7.2)])
plot(speed1[which(speed1<=7.2)],type='l')
hist(speed1[which(speed1<=7.2)],type='l')
hist(speed1[which(speed1<=10)],type='l')
hist(speed1[which(speed1<=15)],type='l')
hist(speed1[which(speed1<=15)],xlab='Speed (m/s)')
spot = read.csv('~/Documents/WHOI/Data/Blues/2015/141254/141254-SPOT.csv',row.names=NULL)
str(spot)
spot = spot[,c(1:5)]
dts <- as.POSIXct(spot$date, format=findDateFormat(spot$date))
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
str(spot)
coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
str(spot)
tr <- trip(spot, c('dts','ptt'))
x=tr
if (!is(x, "trip"))
stop("only trip objects supported")
projected <- is.projected(x)
if (is.na(projected)) {
projected <- FALSE
warning("coordinate system is NA, assuming longlat . . .")
}
if (is.null(max.speed)) {
print("no max.speed given, nothing to do here")
return(x)
}
longlat <- !projected
coords <- coordinates(x)
tids <- getTimeID(x)
time <- tids[, 1]
id <- factor(tids[, 2])
x <- coords[, 1]
y <- coords[, 2]
pprm <- 3
grps <- levels(id)
if (length(x) != length(y))
stop("x and y vectors must be of same\nlength")
if (length(x) != length(time))
stop("Length of times not equal to number of points")
okFULL <- rep(TRUE, nrow(coords))
if (test)
res <- list(speed = numeric(0), rms = numeric(0))
grps
sub=grps
ind <- id == sub
xy <- matrix(c(x[ind], y[ind]), ncol = 2)
tms <- time[ind]
npts <- nrow(xy)
if (pprm%%2 == 0 || pprm < 3) {
msg <- paste("Points per running mean should be odd and",
"greater than 3, pprm=3")
stop(msg)
}
RMS <- rep(max.speed + 1, npts)
offset <- pprm - 1
ok <- rep(TRUE, npts)
if (npts < (pprm + 1)) {
warning("Not enough points to filter ID: \"", sub,
"\"\n continuing . . . \n")
okFULL[ind] <- ok
next
}
index <- 1:npts
iter <- 1
n <- length(which(ok))
x1 <- xy[ok, ]
# output is km/hr
speed1 <- trackDistance(x1[-nrow(x1), 1], x1[-nrow(x1),
2], x1[-1, 1], x1[-1, 2], longlat = !projected)/(diff(unclass(tms[ok]))/3600)
speed2 <- trackDistance(x1[-((nrow(x1) - 1):nrow(x1)),
1], x1[-((nrow(x1) - 1):nrow(x1)), 2], x1[-(1:2),
1], x1[-(1:2), 2], longlat = !projected)/((unclass(tms[ok][-c(1,
2)]) - unclass(tms[ok][-c(n - 1, n)]))/3600)
hist(speed1)
hist(speed1[which(speed1<=15)])
hist(speed1[which(speed1<=15)],xlab='Speed (km/hr)')
hist(speed1[which(speed1<=15)]*1000/3600,xlab='Speed (km/hr)')
grps
spd141270 <- speed1
spot = read.csv('~/Documents/WHOI/RData/WhiteSharks/2013/121325/121325-SPOT.csv')
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
coordinates(spot) <- ~Longitude + Latitude
coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','ptt'))
tr <- trip(spot, c('dts','Ptt'))
sf <- speedfilter2(tr, max.speed = speed)
str(sf)
speedfilter2 <- function (x, max.speed = NULL, test = FALSE)
{
if (!is(x, "trip"))
stop("only trip objects supported")
projected <- is.projected(x)
if (is.na(projected)) {
projected <- FALSE
warning("coordinate system is NA, assuming longlat . . .")
}
if (is.null(max.speed)) {
print("no max.speed given, nothing to do here")
return(x)
}
longlat <- !projected
coords <- coordinates(x)
tids <- getTimeID(x)
time <- tids[, 1]
id <- factor(tids[, 2])
x <- coords[, 1]
y <- coords[, 2]
pprm <- 3
grps <- levels(id)
if (length(x) != length(y))
stop("x and y vectors must be of same\nlength")
if (length(x) != length(time))
stop("Length of times not equal to number of points")
okFULL <- rep(TRUE, nrow(coords))
if (test)
res <- list(speed = numeric(0), rms = numeric(0))
for (sub in grps) {
ind <- id == sub
xy <- matrix(c(x[ind], y[ind]), ncol = 2)
tms <- time[ind]
npts <- nrow(xy)
if (pprm%%2 == 0 || pprm < 3) {
msg <- paste("Points per running mean should be odd and",
"greater than 3, pprm=3")
stop(msg)
}
RMS <- rep(max.speed + 1, npts)
offset <- pprm - 1
ok <- rep(TRUE, npts)
if (npts < (pprm + 1)) {
warning("Not enough points to filter ID: \"", sub,
"\"\n continuing . . . \n")
okFULL[ind] <- ok
next
}
index <- 1:npts
iter <- 1
#while (any(RMS > max.speed, na.rm = TRUE)) {
n <- length(which(ok))
x1 <- xy[ok, ]
# output is km/hr
speed1 <- trackDistance(x1[-nrow(x1), 1], x1[-nrow(x1),
2], x1[-1, 1], x1[-1, 2], longlat = !projected)/(diff(unclass(tms[ok]))/3600)
speed2 <- trackDistance(x1[-((nrow(x1) - 1):nrow(x1)),
1], x1[-((nrow(x1) - 1):nrow(x1)), 2], x1[-(1:2),
1], x1[-(1:2), 2], longlat = !projected)/((unclass(tms[ok][-c(1,
2)]) - unclass(tms[ok][-c(n - 1, n)]))/3600)
return(speed1)
}
}
sf <- speedfilter2(tr, max.speed = speed)
str(sf)
spd121325 <- sf
spot = read.csv('~/Documents/WHOI/RData/WhiteSharks/2013/121325/121325-SPOT.csv')
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
# remove duplicate date-times
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
coordinates(spot) <- ~Longitude + Latitude
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','Ptt'))
# filter at maximum speed in km/hr
# e.g. 2 m/s = 7.2 km/hr
sf <- speedfilter2(tr, max.speed = speed)
str(sf)
blues <- read.table('/Users/Cam/Documents/WHOI/RData/sharkSiteData/AllArgosData.csv',sep=',')
str(blues)
blues <- read.table('/Users/Cam/Documents/WHOI/RData/sharkSiteData/AllArgosData.csv',sep=',',header=T)
str(blues)
unique(blues$ptt)
spot <- blues[which(blues$ptt==141261),]
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
str(spot)
findDateFormat
head(spot)
dateformat = '%Y-%m-%d %H:%M:%S'
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
str(spot)
dts <- as.POSIXct(spot$Date)#, format=findDateFormat(spot$Date))
spot$date[1]
dateformat
dts <- as.POSIXct(spot$Date, format="%Y-%m-%d %H:%M:%S")
str(spot)
str(spot$date)
print(spot$date[1])
blues <- read.table('/Users/Cam/Documents/WHOI/RData/sharkSiteData/AllArgosData.csv',sep=',',header=T)
str(blues)
spot <- blues[which(blues$ptt==141261),]
dts <- as.POSIXct(spot$date, format=findDateFormat(spot$Date))
dts <- as.POSIXct(spot$date, format=findDateFormat(spot$date))
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
str(spot)
coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','Ptt'))
tr <- trip(spot, c('dts','ptt'))
sf <- speedfilter2(tr, max.speed = speed)
str(sf)
tr$ptt[1]
df$spd141261 <- sf
rm(df)
df$spd141261 <- sf
df1$spd141261 <- sf
df1 <- list()
df1$spd141261 <- sf
str(df1)
spot <- blues[which(blues$ptt==141264),]
dts <- as.POSIXct(spot$date, format=findDateFormat(spot$date))
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
#coordinates(spot) <- ~Longitude + Latitude
coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','ptt'))
# filter at maximum speed in km/hr
# e.g. 2 m/s = 7.2 km/hr
sf <- speedfilter2(tr, max.speed = speed)
head(tr)
df1$spd141264 <- sf
str(df1)
spot <- blues[which(blues$ptt==141267),]
dts <- as.POSIXct(spot$date, format=findDateFormat(spot$date))
#dts <- as.POSIXct(spot$date, format="%Y-%m-%d %H:%M:%S")
# remove duplicate date-times
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
#coordinates(spot) <- ~Longitude + Latitude
coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','ptt'))
# filter at maximum speed in km/hr
# e.g. 2 m/s = 7.2 km/hr
sf <- speedfilter2(tr, max.speed = speed)
df1$spd141267 <- sf
str(df1)
spot <- blues[which(blues$ptt==141268),]
dts <- as.POSIXct(spot$date, format=findDateFormat(spot$date))
#dts <- as.POSIXct(spot$date, format="%Y-%m-%d %H:%M:%S")
# remove duplicate date-times
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
#coordinates(spot) <- ~Longitude + Latitude
coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','ptt'))
# filter at maximum speed in km/hr
# e.g. 2 m/s = 7.2 km/hr
sf <- speedfilter2(tr, max.speed = speed)
df1$spd141268 <- sf
spot <- blues[which(blues$ptt==141270),]
dts <- as.POSIXct(spot$date, format=findDateFormat(spot$date))
#dts <- as.POSIXct(spot$date, format="%Y-%m-%d %H:%M:%S")
# remove duplicate date-times
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
#coordinates(spot) <- ~Longitude + Latitude
coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','ptt'))
# filter at maximum speed in km/hr
# e.g. 2 m/s = 7.2 km/hr
sf <- speedfilter2(tr, max.speed = speed)
df1$spd141270 <- sf
str(df1)
spot = read.csv('~/Documents/WHOI/RData/WhiteSharks/2012/121418/121418-SPOT.csv')
spot = read.csv('~/Documents/WHOI/Data/WhiteSharks/2012/121418/121418-SPOT.csv')
spot = read.csv('~/Documents/WHOI/Data/WhiteSharks/2012/121418/121418-Locations.csv')
str(spot)
spot <- spot[which(spot$Type=='Argos'),]
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
coordinates(spot) <- ~Longitude + Latitude
#coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
str(spot)
tr <- trip(spot, c('dts','Ptt'))
sf <- speedfilter2(tr, max.speed = speed)
df1$spd121418 <- sf
sf
str(df1)
spot = read.csv('~/Documents/WHOI/Data/WhiteSharks/2012/121425/121425-Locations.csv')
#spot <- blues[which(blues$ptt==141270),]
spot <- spot[which(spot$Type=='Argos'),]
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
#dts <- as.POSIXct(spot$date, format="%Y-%m-%d %H:%M:%S")
# remove duplicate date-times
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
coordinates(spot) <- ~Longitude + Latitude
#coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','Ptt'))
# filter at maximum speed in km/hr
# e.g. 2 m/s = 7.2 km/hr
sf <- speedfilter2(tr, max.speed = speed)
plot(sf,type='l')
df1$spd121425 <- sf
str(df1)
spot = read.csv('~/Documents/WHOI/Data/WhiteSharks/2013/121325/121420-Locations.csv')
#spot <- blues[which(blues$ptt==141270),]
spot <- spot[which(spot$Type=='Argos'),]
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
#dts <- as.POSIXct(spot$date, format="%Y-%m-%d %H:%M:%S")
# remove duplicate date-times
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
coordinates(spot) <- ~Longitude + Latitude
#coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','Ptt'))
# filter at maximum speed in km/hr
# e.g. 2 m/s = 7.2 km/hr
sf <- speedfilter2(tr, max.speed = speed)
hist(sf)
hist(sf,xlim=c(0,15))
hist(sf[which(sf<=15)]
)
str(df1)
df1$spd121420 <- sf
spot = read.csv('~/Documents/WHOI/Data/WhiteSharks/2013/121322/132360-Locations.csv')
#spot <- blues[which(blues$ptt==141270),]
spot <- spot[which(spot$Type=='Argos'),]
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
#dts <- as.POSIXct(spot$date, format="%Y-%m-%d %H:%M:%S")
# remove duplicate date-times
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
coordinates(spot) <- ~Longitude + Latitude
#coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','Ptt'))
# filter at maximum speed in km/hr
# e.g. 2 m/s = 7.2 km/hr
sf <- speedfilter2(tr, max.speed = speed)
hist(sf[which(sf<=15)])
str(spot)
df1$spd132360 <- sf
str(df1)
spot = read.csv('~/Documents/WHOI/Data/WhiteSharks/2013/110492/132352-Locations.csv')
#spot <- blues[which(blues$ptt==141270),]
spot <- spot[which(spot$Type=='Argos'),]
dts <- as.POSIXct(spot$Date, format=findDateFormat(spot$Date))
#dts <- as.POSIXct(spot$date, format="%Y-%m-%d %H:%M:%S")
# remove duplicate date-times
spot$dts <- dts
spot <- spot[which(!duplicated(spot$dts)),] #modify this to take better loc class from duplicate times
# convert track to SpatialPointsDataFrame
coordinates(spot) <- ~Longitude + Latitude
#coordinates(spot) <- ~lon + lat
proj4string(spot)=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
# filter based on bathymetry - use raster::extract to sample
#   bathy at each point and filter >=0
ext <- raster::extract(bathy, spot) < 0
spot <- spot[ext,]
# then to trip object
tr <- trip(spot, c('dts','Ptt'))
# filter at maximum speed in km/hr
# e.g. 2 m/s = 7.2 km/hr
sf <- speedfilter2(tr, max.speed = speed)
hist(sf[which(sf<=15)])
str(sf)
df1$spd132352 <- sf
str(df1)
?density
logo <- stack(system.file("external/rlogo.grd", package="raster"))
density(logo)
density
showMethods('density')
str(df1)
length(df1)
i=1
str(df1[[1]])
data <- df1[[1]]
all <- data.frame(NA, ncol=3)
all[,2] <- df1[[1]]
all <- data.frame(NA, ncol=3, nrow=10^4)
all[,2] <- df1[[1]]
str(as.data.frame(df1))
save.image('~/Documents/WHOI/RCode/hmmwoa/speeds.RData')
save('~/Documents/WHOI/RCode/hmmwoa/speeds.RData')
save.image("~/Documents/WHOI/RCode/hmmwoa/speeds.RData")
base::save.image("~/Documents/WHOI/RCode/hmmwoa/speeds.RData")
